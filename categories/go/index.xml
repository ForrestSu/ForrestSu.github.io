<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/categories/go/</link>
    <description>Recent content in Go on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 17 Nov 2020 23:28:06 +0800</lastBuildDate>
    
	<atom:link href="https://forrestsu.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 常用的包推荐 (持续更新)</title>
      <link>https://forrestsu.github.io/posts/go/golang-recommend-pkgs/</link>
      <pubDate>Tue, 17 Nov 2020 23:28:06 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/golang-recommend-pkgs/</guid>
      <description>1 Go 常用工具包推荐  1 [stringer] 为枚举量生成String()方法   go install golang.org/x/tools/cmd/stringer
  2 GoMock  2 常用开发库   1 http-router
高性能、可扩展的HTTP路由
  2 easyjson
高性能的Json Codec, 适用于有schema的Json数据</description>
    </item>
    
    <item>
      <title>Go select多路复用, 实现超时机制</title>
      <link>https://forrestsu.github.io/posts/go/select-in-go/</link>
      <pubDate>Wed, 18 Dec 2019 20:19:15 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/select-in-go/</guid>
      <description>1 Preface 我们在 Linux 服务端编程的时候，select/epoll 可以监控多个fd, 并且可以指定超时时间。 那么我们在Go 里面也有select 关键字，那么怎么实现超时机制呢？
在 select 中加入一个 timer channel
 case rc2 := &amp;lt;-time.After(d):
 After等待持续时间过去，然后在返回的通道上发送当前时间。 它等效于NewTimer(d)。 在计时器触发之前，底层的计时器不会由垃圾收集器恢复。 如果需要提高效率，请改用NewTimer，如果不再需要计时器，请调用Timer.Stop。
完整代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // 采用 select 实现超时 func TestSelectTimeOut(t *testing.</description>
    </item>
    
    <item>
      <title>Go 反射</title>
      <link>https://forrestsu.github.io/posts/go/reflection-in-go/</link>
      <pubDate>Tue, 17 Dec 2019 18:10:48 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/reflection-in-go/</guid>
      <description>1 Preface  反射是程序在运行时检查变量和值, 并获取到它们的类型的能力。
 很多主流语言都提供了反射语法特性，比如Java, python等; C++语言本身不支持反射， 但是第三方库实现了反射特性, 比如 google 的 protobuf。
如果支持反射，解决某些场景的问题，可以变得简单。 比如通过struct/class, 生成对应的建表语句，根据生成 insert 语句(批量将CSV导入数据库)等。
在之前的文章中，我们了解了如何在 Java/C++ 中使用反射：
 Java-反射机制 protobuf-反射  2 Go 反射 Go语言中使用空的接口，表示任一类型(可以理解为Any, 或者Java 中的 Object)</description>
    </item>
    
    <item>
      <title>什么是鸭子类型(duck typing)</title>
      <link>https://forrestsu.github.io/posts/go/duck-type/</link>
      <pubDate>Sat, 10 Aug 2019 19:34:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/duck-type/</guid>
      <description>&lt;h2 id=&#34;1-duck-type&#34;&gt;1 duck type&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。&lt;/p&gt;
&lt;p&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://forrestsu.github.io/images/hk-victoria-harbor-duck.jpg&#34;&gt;
            &lt;img class=&#34;mx-auto&#34; alt=&#34;duck-type&#34; src=&#34;https://forrestsu.github.io/images/hk-victoria-harbor-duck.jpg&#34; /&gt;
        &lt;/a&gt;
    &lt;/p&gt;
&lt;p&gt;比如在 python 中，有很多 &lt;code&gt;file-like&lt;/code&gt; 的东西，比如 StringIO, GzipFile, socket;
它们有很多相同的方法，我们把它们当作文件使用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>