<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/categories/design/</link>
    <description>Recent content in Design on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 09 Dec 2022 19:07:00 +0800</lastBuildDate><atom:link href="https://forrestsu.github.io/categories/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LogReplay 流量录制回放设计与实现</title>
      <link>https://forrestsu.github.io/posts/design/log-replay/</link>
      <pubDate>Fri, 09 Dec 2022 19:07:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/design/log-replay/</guid>
      <description>1 前言 基于拦截器，实现一个基于 trpc 协议的流量录制、回放插件。 支持回放流量验证。 常用场景： 服务重构后的流量验证，差异检测 日常需求迭代，回放验证(上线前) 2 整体方案 实现两组拦截器：录制拦截器、回放拦截器 录制拦截器：负责记录服务接口+所有下游调用数据（req、rsp、err），序列化后上报，用于回放。 回放拦截器：负责下游调用的mock（不实际发起调用），服务接口的回包上报，用于diff。 回包 diff 能力：由 LogReplay 平台提供，拦截器插件只负责上报diff所需数据。 补充一点，如何保存切面数据？ 方案一： 基于trpc包头 metadata</description>
    </item>
    
    <item>
      <title>企微机器人设计</title>
      <link>https://forrestsu.github.io/posts/design/wework-robot-design/</link>
      <pubDate>Wed, 30 Mar 2022 01:10:59 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/design/wework-robot-design/</guid>
      <description>1 为什么要做一个机器人？ 解决的问题 （🤖的适用场景） 日常工作中，重复繁琐的运营工作 线上问题定位 （媒资 Union 查询，用户染色、错误日志等 ） 借助机器人做错误告警，业务周报等 2 设计思想 可扩展 可扩展，轻松增加新指令 统一的指令注册接口 指令按照 tree 的方式管理，每个指令实现一个文件。 内聚：指令实现细节在内部的 rpc 包中管理 基于文本消息指令 基于空格分隔的多级指令设计； 格式：@robot &amp;lt;cmd&amp;hellip;&amp;gt; &amp;lt; arguments &amp;gt; 易用性（对用户友好） 类似 unix 工具，每一级指令要带有 help 指令，并给出示例，无需查询文档，即可上手。 采用 markdown 消息， 消息样式丰富，可读性好，提示使</description>
    </item>
    
  </channel>
</rss>
