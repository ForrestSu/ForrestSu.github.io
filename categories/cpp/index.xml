<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPP on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/categories/cpp/</link>
    <description>Recent content in CPP on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Tue, 20 Feb 2024 08:11:00 +0800</lastBuildDate><atom:link href="https://forrestsu.github.io/categories/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于 C&#43;&#43; 未定的行为</title>
      <link>https://forrestsu.github.io/posts/cpp/%E5%85%B3%E4%BA%8Ec&#43;&#43;%E6%9C%AA%E5%AE%9A%E7%9A%84%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Tue, 20 Feb 2024 08:11:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/%E5%85%B3%E4%BA%8Ec&#43;&#43;%E6%9C%AA%E5%AE%9A%E7%9A%84%E8%A1%8C%E4%B8%BA/</guid>
      <description>4 最后，不应该研究未定义行为（ 对，第4点很重要！但是，cpp的未定义行为实在太多了，要提前学完也还真不容易。 给了const，又能const_cast。大家不应该经常cast，但是又没办法就是需要cast，比如派生类指针在继承树上候选类型之间的切换。开发者得一个个都经历，都思考，然后才能用好。 Bjarne Stroustrup说相信程序员都是聪明的，但是程序员很多时候并不相信自己足够聪明。我就经常在debug的时候怀疑人生。</description>
    </item>
    
    <item>
      <title>g&#43;&#43; -Wall 不会提示 narrow-cast 的警告</title>
      <link>https://forrestsu.github.io/posts/cpp/narrow-cast-no-warnning/</link>
      <pubDate>Fri, 06 Nov 2020 11:09:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/narrow-cast-no-warnning/</guid>
      <description>Preface 最近在使用 go 重构C++旧项目, 发现一个旧代码的bug，很有意思；下面展示一下简化的代码: 1 2 3 4 int64_t ip = 12345678; std::string str; str = ip; std::cout &amp;lt;&amp;lt; &amp;#34;str = &amp;#34; &amp;lt;&amp;lt; str &amp;lt;&amp;lt; std::endl; // str = N 我的第一感觉是: 第三行应该编译报错吧，于是写了个hello world，然后g++ -Wall ...， 竟然编译过了还能正常运行, 神奇吧。 于是探其究竟，原来string重载了赋值符号=, 支持单个字符 char 的赋值，int64在这里发生了窄转换。 源码如下： 1 2 3 4 basic_string&amp;amp; operator=(_CharT __c) { this-&amp;gt;assign(1, __c); return *this; } 这就解释了为啥输出字符&amp;quot;N&amp;quot;， int64转换成 char，仅保留了最低的一个字节</description>
    </item>
    
    <item>
      <title>不建议使用std::thread</title>
      <link>https://forrestsu.github.io/posts/cpp/not-use-std-thread/</link>
      <pubDate>Sun, 15 Mar 2020 11:09:07 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/not-use-std-thread/</guid>
      <description>1 问题描述 使用std::thread 创建线程, 代码逻辑如果主动throw 某些异常, 但是用户又没有捕获。这时候程序会产生coredump, 但是分析coredump, 会发现调用栈是缺失的，根本无法定位具体问题。 为了方便理解，下面给一个例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 // g++ -std=c++0x -g test.cpp -lpthread -o test #include &amp;lt;stdexcept&amp;gt; #include &amp;lt;thread&amp;gt; void foo() { throw std::runtime_error(&amp;#34;foo&amp;#34;); } int main() { std::thread t(foo); t.join(); } 直接运行就会产生coredump, 通过gdb 分析： $ gdb test core.1243 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Program received signal SIGABRT, Aborted. [Switching to Thread 0x7ffff7fd0700 (LWP 10278)] 0x000000318f036285 in raise () from /lib64/libc.so.6 Missing separate debuginfos, use: debuginfo-install glibc-2.14.90-24.fc16.9.x86_64 libgcc-4.6.3-2.fc16.x86_64 libstdc++-4.6.3-2.fc16.x86_64 (gdb) bt #0 0x000000318f036285 in raise () from /lib64/libc.so.6 #1 0x000000318f037b9b in abort () from /lib64/libc.so.6 #2 0x00000031964bbc5d in __gnu_cxx::__verbose_terminate_handler() () from /usr/lib64/libstdc++.so.6 #3 0x00000031964b9e16 in</description>
    </item>
    
    <item>
      <title>C&#43;&#43;14 lambda 用法</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp14-lambda-usage/</link>
      <pubDate>Fri, 07 Feb 2020 17:42:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp14-lambda-usage/</guid>
      <description>1 嵌套lambda表达式 写一个lambda表达式A，其入参是一个lambda表达式B： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include &amp;lt;cstdio&amp;gt; #include &amp;lt;iostream&amp;gt; namespace example01 { template&amp;lt;typename Func&amp;gt; void run_task(Func &amp;amp;&amp;amp;func) { int arg = 100; printf(&amp;#34;1. arg &amp;gt;&amp;gt; %d\n&amp;#34;, arg); /** * 定义一个别名,进行引用捕获 * (注意：引用捕获时，请考虑被捕获对象的生命周期) */ func([&amp;amp;i = arg]() mutable { ++i; printf(&amp;#34;3. i == %d\n&amp;#34;, i); throw std::logic_error(&amp;#34;逻辑错误&amp;#34;); }); printf(&amp;#34;6. arg &amp;lt;&amp;lt; %d\n&amp;#34;, arg); } inline void run() { //写一个lambda表达式A，其入参是一个lambda表达式B example01::run_task([](auto get_ex) { printf(&amp;#34;2. start check\n&amp;#34;); try { get_ex(); } catch (std::exception &amp;amp;ex) { std::cout &amp;lt;&amp;lt; &amp;#34;4.</description>
    </item>
    
    <item>
      <title>VSCode C&#43;&#43; bazel</title>
      <link>https://forrestsu.github.io/posts/cpp/vscode-cpp-bazel/</link>
      <pubDate>Thu, 16 Jan 2020 17:06:09 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/vscode-cpp-bazel/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用 CMake 快速制作 RPM 安装包</title>
      <link>https://forrestsu.github.io/posts/cpp/build_tool/build-rpm-package-use-cmake/</link>
      <pubDate>Thu, 16 Jan 2020 17:06:09 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/build_tool/build-rpm-package-use-cmake/</guid>
      <description>1 Preface 最近对框架进行了改造，支持yaml格式的配置文件， 使用到了 yaml-cpp 这个第三方库， yum官方提供的是 0.5.1 版本(依赖boost)，看到最新版 0.6.3 已经去除了boost的依赖， 于时想自己做一个包。 制作 rpm 包通用的方式是： 直接使用rpm-build, 编写project.spec,这样就需要了解spec的语法规则。 今天不经意在网上搜到，可以用CMake来制作RPM包(因为我们的 C++ 项目也是采用 CMake 进行编译的)。 CMake打包的基本原理是：CMake内部有一个cpack工具，支持调用不同的打包工具(比如 rpmbuild) 下面我们就基于C</description>
    </item>
    
    <item>
      <title>Multithreading-with-ZeroMQ</title>
      <link>https://forrestsu.github.io/posts/cpp/multithreading-with-zeromq/</link>
      <pubDate>Tue, 30 Oct 2018 19:50:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/multithreading-with-zeromq/</guid>
      <description>本文翻译自ZeroMQ文档的一小部分内容, 该段落提供了解决多线程问题的一个绝佳方式。 这是前辈30多年的并发编程经验之谈！ 点击阅读原文：Multithreading-with-ZeroMQ Preface ZeroMQ(又称为ØMQ,0MQ,或zmq)看起来像一个可嵌入的网络编程库, 但用起来更像是一个并发框架。 它为你提供的套接字(sockets), 能以进程间, 进程内, TCP 和多播等多种方式传输原子消息。 你可以用fan-out, pub-sub, 任务分发, 和 req-rep 等多种模式, 给套接字建立多对多的连接。 它速度之快足以构建集群产品。 它的异步I</description>
    </item>
    
    <item>
      <title>C&#43;&#43; RAII</title>
      <link>https://forrestsu.github.io/posts/cpp/raii-in-cpp/</link>
      <pubDate>Tue, 10 Apr 2018 11:01:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/raii-in-cpp/</guid>
      <description>什么是RAII ? RAII即“Resource Acquisition Is Initialization”，也称为“资源获取即初始化”。是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。 RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。</description>
    </item>
    
    <item>
      <title>c和c&#43;&#43;混用技巧</title>
      <link>https://forrestsu.github.io/posts/cpp/c%E5%92%8Cc&#43;&#43;%E6%B7%B7%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 17 Jul 2017 16:12:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c%E5%92%8Cc&#43;&#43;%E6%B7%B7%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>1 用C-style 来访问vector 1 2 3 4 5 6 7 8 vector&amp;lt;char*&amp;gt; str; str.push_back(&amp;#34;abc&amp;#34;); str.push_back(&amp;#34;123&amp;#34;); //按照 C-style 来访问vector char** ptr= str.data(); for(int i =0;i&amp;lt;2;++i) printf(&amp;#34;%s\n&amp;#34;,ptr[i]);</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 std::function 和 std::bind</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp11-std_function%E5%92%8Cstd_bind/</link>
      <pubDate>Fri, 09 Jun 2017 16:50:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp11-std_function%E5%92%8Cstd_bind/</guid>
      <description>1 std::bind std::bind 可以用来绑定一个函数 std::placeholders; 定义有_1、_2、_3 &amp;hellip; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;functional&amp;gt; using namespace std; using namespace std::placeholders; int f(int, char, double); int main() { // 翻转参数顺序 auto frev = bind(f, _3, _2, _1); int x = frev(1.2, &amp;#39;w&amp;#39;, 7); cout&amp;lt;&amp;lt;x&amp;lt;&amp;lt;endl; return 0; } int f(int a, char b , double c) { cout&amp;lt;&amp;lt;&amp;#34;a==&amp;#34;&amp;lt;&amp;lt; a &amp;lt;&amp;lt;&amp;#34;,b==&amp;#34; &amp;lt;&amp;lt;b &amp;lt;&amp;lt; &amp;#34;,c==&amp;#34;&amp;lt;&amp;lt;c &amp;lt;&amp;lt;endl; return 0; } 2 std::function std::function 可以用来定义一个函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int add(int a, int b){ return a+b; } auto mod=[](int a, int b){return a%b;}; struct divide{ int operator()(int m, int n){ return m/n; } }; int main() { function&amp;lt;int(int,int)&amp;gt; func1= add; function&amp;lt;int(int,int)&amp;gt; func2= mod; function&amp;lt;int(int,int)&amp;gt; func3= divide(); cout&amp;lt;&amp;lt;func1(5, 6)&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;func2(5, 6)&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;func3(5, 6)&amp;lt;&amp;lt;endl; return 0; }</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 特性：成员函数引用限定符(Reference qualifier)</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp11-reference-qualifier/</link>
      <pubDate>Sat, 08 Apr 2017 20:42:42 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp11-reference-qualifier/</guid>
      <description>1 引用限定符 学了这么多年C++，今天拜读了Scott Meyes的《more effective cpp》，第一次看到这种写法&amp;hellip; 引用限定可以让成员函数只能被左值对象调用或者只能被右值对象调用。 下面举例说明： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace left_value { class Hello { void show() &amp;amp; { std::cout &amp;lt;&amp;lt; &amp;#34;just for left-value\n&amp;#34;; } }; inline void run() { Hello t; t.show(); // ok Hello{}.show(); // compile error: passing &amp;#39;left_value::Hello&amp;#39; as &amp;#39;this&amp;#39; argument discards qualifiers [-fpermissive] } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace right_value { struct Test { void show() &amp;amp;&amp;amp; { std::cout &amp;lt;&amp;lt; &amp;#34; just for right value\n&amp;#34;; } }; inline void run() { Test t; t.show(); //compile error: passing &amp;#39;right_value::Test&amp;#39; as &amp;#39;this&amp;#39; argument discards qualifiers [-fpermissive] Test{}.show(); //ok } } 换句话说，引用限定所限定的就是*this，它可以让一些函数只被左值this调用或者右值</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 explicit关键字</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp-explicit-keywords/</link>
      <pubDate>Fri, 07 Apr 2017 23:42:42 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp-explicit-keywords/</guid>
      <description>C++中的explicit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Test1 { public: Test1(int n) { num=n; }//普通构造函数 private: int num; }; class Test2 { public: explicit Test2(int n) { num=n; }//explicit(显式)构造函数 private: int num; }; int main() { Test1 t1=12; //隐式调用其构造函数,成功 Test2 t2=12; //编译错误,不能隐式调用其构造函数 Test2 t2(12); //显式调用成功 return 0; }</description>
    </item>
    
    <item>
      <title>深入理解C&#43;&#43;11智能指针</title>
      <link>https://forrestsu.github.io/posts/cpp/deep-in-smart-pointer-cpp/</link>
      <pubDate>Fri, 07 Apr 2017 20:54:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/deep-in-smart-pointer-cpp/</guid>
      <description>1 Preface 软件工程遇到的问题都可以通过增加一个中间层来解决, 智能指针也是基于这样的思想； C++ 11 包含了以下 3 种常用的智能指针： std::unique_ptr std::shared_ptr std::weak_ptr 包含头文件 #include &amp;lt;memory&amp;gt; 即可 2 原理分析 2.1 shared_ptr 直接用 shared_ptr 管理一个堆上的裸指针对象： 1 std::shared_ptr&amp;lt;Good&amp;gt; gp1(new Good()); 2.2 weak_ptr weak_ptr类 和 shared_ptr类 的成员变量相同。 为什么需要 weak_ptr? 因为 shared_ptr 是对象的强引用, 一旦发生循环引用,对象就无法析构, 所以 weak_ptr 出现就是为了解决循环引用的问题。 打个不恰当的比喻：weak_ptr就像寄生虫，shared_ptr就是宿主。 weak_ptr 和 shared_ptr 内存结构相同(1 个原始对象指针 + ctrl_block_t 指针)； 不同之处在于</description>
    </item>
    
    <item>
      <title>posix 进程 vs. 线程 </title>
      <link>https://forrestsu.github.io/posts/cpp/posix-process-vs-thread/</link>
      <pubDate>Wed, 22 Mar 2017 17:48:27 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/posix-process-vs-thread/</guid>
      <description>进程和线程api对比 进程 线程 pid_t thread_t fork pthread_create waitpid pthread_jion exit pthread_exit 在main函数中调用return 在线程函数中调用return 僵进程 僵线程 wait_pid pthread_jion pthread_detach kill pthread_cancel 知识点 1 使用pthread_detach 方法脱离一个线程就不会产生僵线程。 2 获取当前县城id 3 pthread_cancel可以杀死一个执行中的线程。 线程结束 自杀： pthread_exit ,在线程入口函数中调用return. 他杀： pthread_cancel</description>
    </item>
    
    <item>
      <title>Linux 服务端编程（一）</title>
      <link>https://forrestsu.github.io/posts/cpp/linux-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%B8%80/</link>
      <pubDate>Fri, 24 Feb 2017 17:29:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/linux-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%B8%80/</guid>
      <description>ftok()函数 系统建立IPC通讯 （消息队列、信号量和共享内存） 时必须指定一个ID值。通常情况下，该id值通过ftok函数得到。 函数原型：key_t ftok( const char * fname, int id ); (id&amp;gt;0) fname就是你指定的文件名（已经存在的文件名），一般使用当前目录。 在一般的UNIX实现中，是将文件的索引节点号取出。(文件重建将会分配一个新的索引节点号) ftok 返回值组成：hex(id)&amp;amp;0xff03 hex(节点号)&amp;amp;0xffff。 传入的id低8位+0x03+ 节点号的低16位。（test on redhat ） 可通过 ls -l 查看文件节点值。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;关于NULL、0、nullptr</title>
      <link>https://forrestsu.github.io/posts/cpp/about-null-0-nullptr/</link>
      <pubDate>Sun, 17 Jul 2016 01:11:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/about-null-0-nullptr/</guid>
      <description>一 关于NULL、0、nullptr 1 在C语言中NULL被定义为：一个void* 指针，指向的地址为0。 1 #define NULL ((void *)0) 所以在C语言中我们通常会写出如下语句 1 2 int *i = NULL; foo_t *f = NULL; 2 而在C++中，NULL会被定义为0 1 2 3 4 5 #ifndef __cplusplus #define NULL ((void *)0) #else /* C++ */ #define NULL 0 #endif 3 C++11引入了nullptr 来表示空指针 二 在C++中使用NULL的风险 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 //func1 int mycall(char *a, char *b) { cout&amp;lt;&amp;lt;&amp;#34;char pointer!&amp;#34;&amp;lt;&amp;lt;endl; } //func2 int mycall(char *a, int b) { cout&amp;lt;&amp;lt;&amp;#34;int !&amp;#34;&amp;lt;&amp;lt;endl; } // func3 int mycall(char *a,nullptr_t nullp) { cout&amp;lt;&amp;lt;&amp;#34;nullptr !&amp;#34;&amp;lt;&amp;lt;endl; } int main() { char *a,*b; mycall(a,b); //char pointer! //优先调用func2，没有func2则调用func1或fu</description>
    </item>
    
  </channel>
</rss>
