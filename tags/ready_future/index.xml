<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ready_future on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/ready_future/</link>
    <description>Recent content in ready_future on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 08 May 2020 19:55:17 +0800</lastBuildDate><atom:link href="https://forrestsu.github.io/tags/ready_future/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Seastar 之 ready_future(3)</title>
      <link>https://forrestsu.github.io/posts/architecture/archi-seastar/seastar-ready-future/</link>
      <pubDate>Fri, 08 May 2020 19:55:17 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture/archi-seastar/seastar-ready-future/</guid>
      <description>&lt;h2 id=&#34;1-什么是-ready_future&#34;&gt;1 什么是 ready_future&lt;/h2&gt;
&lt;p&gt;如果一个 future 在当下就已经有结果了，不必等到未来某个时刻，
我们把这个 future 称为 &lt;code&gt;ready_future&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ready_future 的不同之处在于:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) ready_future 可以单独使用，不必关联一个promise；&lt;br&gt;
(2) ready_future.then(lambda) 会把传入的lambda立即执行掉，
也就是说这个lambda没有机会放入任务队列；&lt;br&gt;
(3) 而not_ready_future每次执行，产生的新任务都会被放入任务队列，然后依此取出来执行。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
