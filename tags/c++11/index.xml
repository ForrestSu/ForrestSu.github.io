<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;11 on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/c&#43;&#43;11/</link>
    <description>Recent content in C&#43;&#43;11 on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 09 Jun 2017 16:50:08 +0800</lastBuildDate><atom:link href="https://forrestsu.github.io/tags/c++11/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;11 std::function 和 std::bind</title>
      <link>https://forrestsu.github.io/posts/developerguide/cpp/cpp11-std_function%E5%92%8Cstd_bind/</link>
      <pubDate>Fri, 09 Jun 2017 16:50:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/developerguide/cpp/cpp11-std_function%E5%92%8Cstd_bind/</guid>
      <description>1 std::bind std::bind 可以用来绑定一个函数 std::placeholders; 定义有_1、_2、_3 &amp;hellip; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include &amp;lt;functional&amp;gt; using namespace std; using namespace std::placeholders; int f(int, char, double); int main() { // 翻转参数顺序 auto frev = bind(f, _3, _2, _1); int x = frev(1.2, &amp;#39;w&amp;#39;, 7); cout&amp;lt;&amp;lt;x&amp;lt;&amp;lt;endl; return 0; } int f(int a, char b , double c) { cout&amp;lt;&amp;lt;&amp;#34;a==&amp;#34;&amp;lt;&amp;lt; a &amp;lt;&amp;lt;&amp;#34;,b==&amp;#34; &amp;lt;&amp;lt;b &amp;lt;&amp;lt; &amp;#34;,c==&amp;#34;&amp;lt;&amp;lt;c &amp;lt;&amp;lt;endl; return 0; } 2 std::function std::function 可以用来定义一个函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int add(int a, int b){ return a+b; } auto mod=[](int a, int b){return a%b;}; struct divide{ int operator()(int m, int n){ return m/n; } }; int main() { function&amp;lt;int(int,int)&amp;gt; func1= add; function&amp;lt;int(int,int)&amp;gt; func2= mod; function&amp;lt;int(int,int)&amp;gt; func3= divide(); cout&amp;lt;&amp;lt;func1(5, 6)&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;func2(5, 6)&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;func3(5, 6)&amp;lt;&amp;lt;endl; return 0; }</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 特性：成员函数引用限定符(Reference qualifier)</title>
      <link>https://forrestsu.github.io/posts/developerguide/cpp/cpp11-reference-qualifier/</link>
      <pubDate>Sat, 08 Apr 2017 20:42:42 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/developerguide/cpp/cpp11-reference-qualifier/</guid>
      <description>1 引用限定符 学了这么多年C++，今天拜读了Scott Meyes的《more effective cpp》，第一次看到这种写法&amp;hellip; 引用限定可以让成员函数只能被左值对象调用或者只能被右值对象调用。 下面举例说明： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace left_value { class Hello { void show() &amp;amp; { std::cout &amp;lt;&amp;lt; &amp;#34;just for left-value\n&amp;#34;; } }; inline void run() { Hello t; t.show(); // ok Hello{}.show(); // compile error: passing &amp;#39;left_value::Hello&amp;#39; as &amp;#39;this&amp;#39; argument discards qualifiers [-fpermissive] } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 namespace right_value { struct Test { void show() &amp;amp;&amp;amp; { std::cout &amp;lt;&amp;lt; &amp;#34; just for right value\n&amp;#34;; } }; inline void run() { Test t; t.show(); //compile error: passing &amp;#39;right_value::Test&amp;#39; as &amp;#39;this&amp;#39; argument discards qualifiers [-fpermissive] Test{}.show(); //ok } } 换句话说，引用限定所限定的就是*this，它可以让一些函数只被左值this调用或者右值</description>
    </item>
    
    <item>
      <title>深入理解C&#43;&#43;11智能指针</title>
      <link>https://forrestsu.github.io/posts/developerguide/cpp/deep-in-smart-pointer-cpp/</link>
      <pubDate>Fri, 07 Apr 2017 20:54:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/developerguide/cpp/deep-in-smart-pointer-cpp/</guid>
      <description>1 Preface 软件工程遇到的问题都可以通过增加一个中间层来解决, 智能指针也是基于这样的思想； C++ 11 包含了以下 3 种常用的智能指针： std::unique_ptr std::shared_ptr std::weak_ptr 包含头文件 #include &amp;lt;memory&amp;gt; 即可 2 原理分析 2.1 shared_ptr 直接用 shared_ptr 管理一个堆上的裸指针对象： 1 std::shared_ptr&amp;lt;Good&amp;gt; gp1(new Good()); 2.2 weak_ptr weak_ptr类 和 shared_ptr类 的成员变量相同。 为什么需要 weak_ptr? 因为 shared_ptr 是对象的强引用, 一旦发生循环引用,对象就无法析构, 所以 weak_ptr 出现就是为了解决循环引用的问题。 打个不恰当的比喻：weak_ptr就像寄生虫，shared_ptr就是宿主。 weak_ptr 和 shared_ptr 内存结构相同(1 个原始对象指针 + ctrl_block_t 指针)； 不同之处在于</description>
    </item>
    
  </channel>
</rss>
