<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lambda on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/lambda/</link>
    <description>Recent content in lambda on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 07 Feb 2020 17:42:28 +0800</lastBuildDate><atom:link href="https://forrestsu.github.io/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;14 lambda 用法</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp14-lambda-usage/</link>
      <pubDate>Fri, 07 Feb 2020 17:42:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp14-lambda-usage/</guid>
      <description>1 嵌套lambda表达式 写一个lambda表达式A，其入参是一个lambda表达式B： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include &amp;lt;cstdio&amp;gt; #include &amp;lt;iostream&amp;gt; namespace example01 { template&amp;lt;typename Func&amp;gt; void run_task(Func &amp;amp;&amp;amp;func) { int arg = 100; printf(&amp;#34;1. arg &amp;gt;&amp;gt; %d\n&amp;#34;, arg); /** * 定义一个别名,进行引用捕获 * (注意：引用捕获时，请考虑被捕获对象的生命周期) */ func([&amp;amp;i = arg]() mutable { ++i; printf(&amp;#34;3. i == %d\n&amp;#34;, i); throw std::logic_error(&amp;#34;逻辑错误&amp;#34;); }); printf(&amp;#34;6. arg &amp;lt;&amp;lt; %d\n&amp;#34;, arg); } inline void run() { //写一个lambda表达式A，其入参是一个lambda表达式B example01::run_task([](auto get_ex) { printf(&amp;#34;2. start check\n&amp;#34;); try { get_ex(); } catch (std::exception &amp;amp;ex) { std::cout &amp;lt;&amp;lt; &amp;#34;4.</description>
    </item>
    
  </channel>
</rss>
