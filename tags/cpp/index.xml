<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPP on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/cpp/</link>
    <description>Recent content in CPP on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 07 Feb 2020 17:42:28 +0800</lastBuildDate>
    
	<atom:link href="https://forrestsu.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;14 lambda 用法</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp14-lambda-usage/</link>
      <pubDate>Fri, 07 Feb 2020 17:42:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp14-lambda-usage/</guid>
      <description>1 嵌套lambda表达式 写一个lambda表达式A，其入参是一个lambda表达式B：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;iostream&amp;gt; namespace example01 { template&amp;lt;typename Func&amp;gt; void run_task(Func &amp;amp;&amp;amp;func) { int arg = 100; printf(&amp;#34;1.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; RAII</title>
      <link>https://forrestsu.github.io/posts/cpp/raii-in-cpp/</link>
      <pubDate>Tue, 10 Apr 2018 11:01:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/raii-in-cpp/</guid>
      <description>什么是RAII ? 　RAII即“Resource Acquisition Is Initialization”，也称为“资源获取即初始化”。是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。 RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。</description>
    </item>
    
    <item>
      <title>c和c&#43;&#43;混用技巧</title>
      <link>https://forrestsu.github.io/posts/cpp/c%E5%92%8Cc&#43;&#43;%E6%B7%B7%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 17 Jul 2017 16:12:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c%E5%92%8Cc&#43;&#43;%E6%B7%B7%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>1 用C-style 来访问vector
1 2 3 4 5 6 7 8  vector&amp;lt;char*&amp;gt; str; str.push_back(&amp;#34;abc&amp;#34;); str.push_back(&amp;#34;123&amp;#34;); //按照 C-style 来访问vector  char** ptr= str.data(); for(int i =0;i&amp;lt;2;++i) printf(&amp;#34;%s\n&amp;#34;,ptr[i]);   </description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 std::function 和 std::bind</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp11-std_function%E5%92%8Cstd_bind/</link>
      <pubDate>Fri, 09 Jun 2017 16:50:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp11-std_function%E5%92%8Cstd_bind/</guid>
      <description>1 std::bind std::bind 可以用来绑定一个函数 std::placeholders; 定义有_1、_2、_3 &amp;hellip;
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include &amp;lt;functional&amp;gt;using namespace std; using namespace std::placeholders; int f(int, char, double); int main() { // 翻转参数顺序  auto frev = bind(f, _3, _2, _1); int x = frev(1.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 特性：成员函数引用限定符(Reference qualifier)</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp11-reference-qualifier/</link>
      <pubDate>Sat, 08 Apr 2017 20:42:42 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp11-reference-qualifier/</guid>
      <description>1 引用限定符 学了这么多年C++，今天拜读了Scott Meyes的《more effective cpp》，第一次看到这种写法&amp;hellip;
引用限定可以让成员函数只能被左值对象调用或者只能被右值对象调用。
下面举例说明：
1 2 3 4 5 6 7 8 9 10 11 12 13 14  namespace left_value { class Hello { void show() &amp;amp; { std::cout &amp;lt;&amp;lt; &amp;#34;just for left-value\n&amp;#34;; } }; inline void run() { Hello t; t.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 explicit关键字</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp-explicit-keywords/</link>
      <pubDate>Fri, 07 Apr 2017 23:42:42 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp-explicit-keywords/</guid>
      <description>C++中的explicit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class Test1 { public: Test1(int n) { num=n; }//普通构造函数 private: int num; }; class Test2 { public: explicit Test2(int n) { num=n; }//explicit(显式)构造函数 private: int num; }; int main() { Test1 t1=12; //隐式调用其构造函数,成功  Test2 t2=12; //编译错误,不能隐式调用其构造函数  Test2 t2(12); //显式调用成功  return 0; }   </description>
    </item>
    
    <item>
      <title>posix 进程 vs. 线程 </title>
      <link>https://forrestsu.github.io/posts/cpp/posix-process-vs-thread/</link>
      <pubDate>Wed, 22 Mar 2017 17:48:27 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/posix-process-vs-thread/</guid>
      <description>进程和线程api对比    进程 线程     pid_t thread_t   fork pthread_create   waitpid pthread_jion   exit pthread_exit   在main函数中调用return 在线程函数中调用return   僵进程 僵线程   wait_pid pthread_jion    pthread_detach   kill pthread_cancel    知识点 1 使用pthread_detach 方法脱离一个线程就不会产生僵线程。 2 获取当前县城id  3 pthread_cancel可以杀死一个执行中的线程。</description>
    </item>
    
    <item>
      <title>Linux 服务端编程（一）</title>
      <link>https://forrestsu.github.io/posts/cpp/linux-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%B8%80/</link>
      <pubDate>Fri, 24 Feb 2017 17:29:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/linux-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%B8%80/</guid>
      <description>ftok()函数 系统建立IPC通讯 （消息队列、信号量和共享内存） 时必须指定一个ID值。通常情况下，该id值通过ftok函数得到。 函数原型：key_t ftok( const char * fname, int id ); (id&amp;gt;0) fname就是你指定的文件名（已经存在的文件名），一般使用当前目录。
在一般的UNIX实现中，是将文件的索引节点号取出。(文件重建将会分配一个新的索引节点号) ftok 返回值组成：hex(id)&amp;amp;0xff03 hex(节点号)&amp;amp;0xffff。 传入的id低8位+0x03+ 节点号的低16位。（test on redhat ） 可通过 ls -l 查看文件节点值。
样例代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>PCLint9安装_(软件质量之道)</title>
      <link>https://forrestsu.github.io/posts/cpp/pclint9%E5%AE%89%E8%A3%85_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B9%8B%E9%81%93/</link>
      <pubDate>Sat, 04 Jun 2016 17:35:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/pclint9%E5%AE%89%E8%A3%85_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B9%8B%E9%81%93/</guid>
      <description>目前官网最新版是PCLint9.0L(2016-6-3)  2. 接下来弹出PCLint的配置程序，点击下一步开始配置。        </description>
    </item>
    
  </channel>
</rss>