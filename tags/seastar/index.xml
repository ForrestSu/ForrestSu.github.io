<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>seastar on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/seastar/</link>
    <description>Recent content in seastar on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 07 Apr 2020 23:06:23 +0800</lastBuildDate>
    
	<atom:link href="https://forrestsu.github.io/tags/seastar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Seastar 之核间通信 (2)</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-inter-core-communication/</link>
      <pubDate>Tue, 07 Apr 2020 23:06:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-inter-core-communication/</guid>
      <description>1 核间通信 Seastar核间通信，只要采用 2 个 eventfd，用于线程间通信。
而每个线程绑定一个core，所以我们这里称之为核间通信。示意图如下：
这里每一对 (w0, w1) 表示一个 event_fd, 他们的关系是：w1=dup(w0), 同理(r0, r1)也是这样的。分离出两个fd为了读写分离，因为读和写是在两个不同的线程。
具体指责划分如下：
 (1) w0 用于其他 core 主动发送 task给当前 core；
(2) w1 收取w0上的, 并在当前core上执行，然后把执行结果写入r1；
(3) r0 core0 侦听所有r0 eventfd，然后执行上面的task；</description>
    </item>
    
    <item>
      <title>Seastar 之 future/promise (1)</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-future-promise/</link>
      <pubDate>Thu, 26 Mar 2020 23:11:26 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-future-promise/</guid>
      <description>1 Preface Seastar (f-p-c) 属于Reactive编程的一个子集。
Seastar的性能源自 sharded，cooperative，non-blocking的微任务调度设计， 而 f-p-c 是将 task 送入调度程序的一种更友好的方式。
Seastar引入了 future/promise, 把面向 callback 编程变成了面向future/promise编程， 将以前的回调代码包装在 lambda_task 中，然后交给future调度。
(1) promise 表示一个承诺，这个承诺将在未来某一个时刻兑现;
(2) promise可以立即返回一个future, 拿到future的调用者可以在未来某个时刻调用future.get()兑现承诺。
为了满足复杂的异步编程需要，Seastar重新实现了一些有别于标准库中的数据结构，因为像 thread safe这样的要求是无需考虑的。这里主要讨论的是Seastar实现的 future/promise。</description>
    </item>
    
    <item>
      <title>Seastar 入门</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-started/</link>
      <pubDate>Tue, 27 Feb 2018 14:00:04 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-started/</guid>
      <description>1 what is Seastar 这篇文章将介绍一下 Seastar : 一个在现在多核机器上编写高效复杂的服务器应用程序的 C++ 库。
有些框架非常高效，但只允许构建简单的应用程序（eg: DPDK 允许单独处理数据包的应用程序）, 而其他框架则允许构建极其复杂的应用程序，代价是运行时效率。Seastar 是我们尝试获得两全其美的方法：创建一个允许构建高度复杂的服务器应用程序并实现最佳性能的库。
2 起源 Seastar 的灵感和首例使用案例是ScyllaDB，重写了Apache Cassandra，Cassandra 是一个分厂复杂的应用，同时通过 Seastar，我们能够重新实现吞吐量提高10倍，以及显着降低和更一致的延迟。 Seastar提供了一个完整的异步编程框架，它使用两个概念 - 期货和延续 - 统一表示和处理每种类型的异步事件，包括网络I/O，磁盘 I/O 以及其他事件的复杂组合。
由于现代多核和多插槽机器在核心之间共享数据（原子指令，高速缓存行反弹和内存隔离）具有陡峭的惩罚，Seastar程序使用无共享编程模型，即可用内存在内核之间分配，每个内核都在其内存部分进行数据处理，内核之间的通信通过显式消息传递进行（当然，这本身就是使用SMP的共享内存硬件发生的）。</description>
    </item>
    
  </channel>
</rss>