<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protobuf on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/protobuf/</link>
    <description>Recent content in Protobuf on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 27 Apr 2018 21:56:39 +0800</lastBuildDate><atom:link href="https://forrestsu.github.io/tags/protobuf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reflection in protobuf (C&#43;&#43;/Java)</title>
      <link>https://forrestsu.github.io/posts/developerguide/library/reflection-in-protobuf-cpp-java/</link>
      <pubDate>Fri, 27 Apr 2018 21:56:39 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/developerguide/library/reflection-in-protobuf-cpp-java/</guid>
      <description>最近工作中，需要做一些消息动态解析，因为使用的 protobuf，考虑使用protobuf的反射特性。 1 reflection in C++ 在c++中使用protobuf 反射 1 2 3 4 5 6 7 8 9 10 11 package com.sunquan; message Login { optional int64 userid = 1; optional string username = 2; // name optional string password = 3; // passwd optional string email = 4; optional string nickname = 5; // etc ... } C++和Java 不同的是： c++有一个全局的pool，管理了所有定义在 proto 文件里的消息原型， 我们可以通过消息全称，查找到对应的单例的消息原型，然后通过原型构造可变的消息。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /** * 通过消息名称, 获取构造该类型的默认（原型）。 然后你可以</description>
    </item>
    
  </channel>
</rss>
