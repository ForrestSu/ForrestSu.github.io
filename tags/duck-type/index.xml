<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>duck-type on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/duck-type/</link>
    <description>Recent content in duck-type on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 10 Aug 2019 19:34:23 +0800</lastBuildDate>
    
	<atom:link href="https://forrestsu.github.io/tags/duck-type/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>什么是鸭子类型(duck typing)</title>
      <link>https://forrestsu.github.io/posts/go/duck-type/</link>
      <pubDate>Sat, 10 Aug 2019 19:34:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/duck-type/</guid>
      <description>1 duck type  &amp;ldquo;当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。&amp;rdquo;
我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。
 比如在 python 中，有很多 file-like 的东西，比如 StringIO, GzipFile, socket; 它们有很多相同的方法，我们把它们当作文件使用。
鸭子类型在动态语言中经常使用，非常灵活，使得 python 不像java那样专门去弄一大堆的设计模式。
2 例子 下面举例用duck typing来实现多态：
#coding=utf-8 class Duck: def quack(self): print &amp;quot;Quaaaaaack!</description>
    </item>
    
  </channel>
</rss>