<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>core on 程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/tags/core/</link>
    <description>Recent content in core on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 07 Apr 2020 23:06:23 +0800</lastBuildDate>
    
	<atom:link href="https://forrestsu.github.io/tags/core/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Seastar 之核间通信 (2)</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-inter-core-communication/</link>
      <pubDate>Tue, 07 Apr 2020 23:06:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-inter-core-communication/</guid>
      <description>&lt;h2 id=&#34;1-0核和任一个核通信&#34;&gt;1 0核和任一个核通信&lt;/h2&gt;
&lt;p&gt;Seastar 使用 eventfd 进行核间（线程间）通信，因为每个线程使用内核API &lt;code&gt;sched_set_affinity()&lt;/code&gt;，绑定一个 SMP 的 core，所以我们这里称之为&lt;strong&gt;核间通信&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Seastar 创建了一个 N*N 的 event_fd 矩阵，每个单元格上两个event_fd，每一行event_fds由一个线程(Core)管理。&lt;br&gt;
也就是说每个线程的 epoll 上，一共需要侦听 2N 个 event_fd。&lt;/p&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;p&gt;
        &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://forrestsu.github.io/images/seastar/inter-core-communication.jpg&#34;&gt;
            &lt;img class=&#34;mx-auto&#34; alt=&#34;f-p-inter-code-communication&#34; src=&#34;https://forrestsu.github.io/images/seastar/inter-core-communication.jpg&#34; /&gt;
        &lt;/a&gt;
    &lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>