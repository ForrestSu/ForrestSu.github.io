<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序员的冷浪漫</title>
    <link>https://forrestsu.github.io/</link>
    <description>Recent content on 程序员的冷浪漫</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 10 Oct 2019 11:28:08 +0800</lastBuildDate>
    
	<atom:link href="https://forrestsu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Eureka 服务注册与发现-原理分析</title>
      <link>https://forrestsu.github.io/posts/architecture-thinking/spring-eureka-registry/</link>
      <pubDate>Mon, 25 May 2020 17:28:06 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture-thinking/spring-eureka-registry/</guid>
      <description>&lt;h2 id=&#34;1-preface&#34;&gt;1 Preface&lt;/h2&gt;
&lt;p&gt;Eureka 是Netflix开发的服务发现框架，本身是一个基于REST的服务。&lt;br&gt;
SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务注册与发现功能。&lt;/p&gt;
&lt;p&gt;在 Spring 全家桶中, Eureka 是一个微服务注册中心，主要提供服务的注册与发现，另一个功能就是服务配置获取。&lt;/p&gt;
&lt;h2 id=&#34;2-eureka-核心概念&#34;&gt;2 Eureka 核心概念&lt;/h2&gt;
&lt;p&gt;Eureka 作为 Spring Cloud 体系中核心、默认的注册中心组件，研究它的运行机制，有助于我们在工作中更好地使用它。&lt;/p&gt;
&lt;p&gt;下图: 服务注册+调用示意图， 服务提供者和服务的消费者，本质上也是 Eureka Client 角色。&lt;br&gt;
整体上可以分为两个主体：&lt;code&gt;Eureka Server&lt;/code&gt; 和 &lt;code&gt;Eureka Client&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://forrestsu.github.io/images/spring/eureka-server.png&#34; alt=&#34;Eureka&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 项目仓库中的 OWNERS 文件</title>
      <link>https://forrestsu.github.io/posts/git/git-owners-files-in-repos/</link>
      <pubDate>Thu, 21 May 2020 22:21:45 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/git/git-owners-files-in-repos/</guid>
      <description>1 Git 在开发中的常用术语 在团队开发过程中，我们经常会看到如下术语(terms)，下面记录一下：
   terms means 翻译     WIP  Work in progress, do not merge yet. 开发中   LGTM Looks good to me.</description>
    </item>
    
    <item>
      <title>Seastar 之 ready_future(3)</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-ready-future/</link>
      <pubDate>Fri, 08 May 2020 19:55:17 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-ready-future/</guid>
      <description>&lt;h2 id=&#34;1-什么是-ready_future&#34;&gt;1 什么是 ready_future&lt;/h2&gt;
&lt;p&gt;如果一个 future 在当下就已经有结果了，不必等到未来某个时刻，
我们把这个 future 称为 &lt;code&gt;ready_future&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ready_future 的不同之处在于:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1) ready_future 可以单独使用，不必关联一个promise；&lt;br&gt;
(2) ready_future.then(lambda) 会把传入的lambda立即执行掉，
也就是说这个lambda没有机会放入任务队列；&lt;br&gt;
(3) 而not_ready_future每次执行，产生的新任务都会被放入任务队列，然后依此取出来执行。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>CPU Cache 架构</title>
      <link>https://forrestsu.github.io/posts/architecture-thinking/cpu-cache/</link>
      <pubDate>Wed, 08 Apr 2020 13:46:15 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture-thinking/cpu-cache/</guid>
      <description>1 SMP (Symmetric Multi-Processor) 对称式多处理器 (SMP) 是一种计算机系统结构。
多处理器结构有两种：
 (l) 对称 —— 多个处理器都是等价的，线程每次受调度运行时都可以动态选择在任何一个处理器上运行。
(2) 非对称 —— 处理器的结构、能力、所处的部位、和作用都各不相同，不同的线程只能在特定的处理器上运行。
 通用 CPU 一般都是对称多处理器，生活中常见的CPU有 Intel Core 和 AMD 的CPU。
现代CPU朝着多核，多线程的方向发展。因为内存的存取速度远远跟不上CPU的执行速度， 所以引入了L1, L2,L3 级cache，L1 cache最小，分为指令cache和数据cache两种，两者都有32 Kbytes,他的存取速度是最接近于寄存器的。L2 cache一般有 256 Kbytes, L3 Cache 有 8 Mbytes。</description>
    </item>
    
    <item>
      <title>Seastar 之核间通信 (2)</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-inter-core-communication/</link>
      <pubDate>Tue, 07 Apr 2020 23:06:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-inter-core-communication/</guid>
      <description>&lt;h2 id=&#34;1-0核和任一个核通信&#34;&gt;1 0核和任一个核通信&lt;/h2&gt;
&lt;p&gt;Seastar 使用 eventfd 进行核间（线程间）通信，因为每个线程使用内核API &lt;code&gt;sched_set_affinity()&lt;/code&gt;，绑定一个 SMP 的 core，所以我们这里称之为&lt;strong&gt;核间通信&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Seastar 创建了一个 N*N 的 event_fd 矩阵，每个单元格上两个event_fd，每一行event_fds由一个线程(Core)管理。&lt;br&gt;
也就是说每个线程的 epoll 上，一共需要侦听 2N 个 event_fd。&lt;/p&gt;
&lt;p&gt;示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://forrestsu.github.io/images/seastar/inter-core-communication.png&#34; alt=&#34;f-p-inter-code-communication&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>多模匹配之AC自动机</title>
      <link>https://forrestsu.github.io/posts/algorithm/ac-automation/</link>
      <pubDate>Tue, 31 Mar 2020 18:06:58 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/algorithm/ac-automation/</guid>
      <description>&lt;h2 id=&#34;1-preface&#34;&gt;1 Preface&lt;/h2&gt;
&lt;p&gt;Aho-Corasick automation，该算法在1975年产生于贝尔实验室，是著名的多模匹配算法。&lt;/p&gt;
&lt;p&gt;AC自动机算法分为3步：&lt;strong&gt;(1)构造一棵Trie树，(2)构造Fail指针, (3) 模式匹配过程&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://forrestsu.github.io/images/algo-ac-automation.png&#34; alt=&#34;ac-automation&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Seastar 之 future/promise 原理(1)</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-future-promise/</link>
      <pubDate>Thu, 26 Mar 2020 23:11:26 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-future-promise/</guid>
      <description>1 Preface Seastar (f-p-c) 属于Reactive编程的一个子集。
Seastar的性能源自 sharded，cooperative，non-blocking的微任务调度设计， 而 f-p-c 是将 task 送入调度程序的一种更友好的方式。
Seastar引入了 future/promise, 把面向 callback 编程变成了面向future/promise编程， 将以前的回调代码包装在 lambda_task 中，然后交给future调度。
(1) promise 表示一个承诺，这个承诺将在未来某一个时刻兑现;
(2) promise可以立即返回一个future, 拿到future的调用者可以在未来某个时刻调用future.get()兑现承诺。
为了满足复杂的异步编程需要，Seastar重新实现了一些有别于标准库中的数据结构，因为像 thread safe这样的要求是无需考虑的。这里主要讨论的是Seastar实现的 future/promise。</description>
    </item>
    
    <item>
      <title>不建议使用std::thread</title>
      <link>https://forrestsu.github.io/posts/cpp/not-use-std-thread/</link>
      <pubDate>Sun, 15 Mar 2020 11:09:07 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/not-use-std-thread/</guid>
      <description>1 问题描述 使用std::thread 创建线程, 代码逻辑如果主动throw 某些异常, 但是用户又没有捕获。这时候程序会产生coredump, 但是分析coredump, 会发现调用栈是缺失的，根本无法定位具体问题。
为了方便理解，下面给一个例子：
1 2 3 4 5 6 7 8 9 10 11 12 13  // g++ -std=c++0x -g test.cpp -lpthread -o test #include &amp;lt;stdexcept&amp;gt;#include &amp;lt;thread&amp;gt;void foo() { throw std::runtime_error(&amp;#34;foo&amp;#34;); } int main() { std::thread t(foo); t.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;14 lambda 用法</title>
      <link>https://forrestsu.github.io/posts/cpp/cpp14_lambda_usage/</link>
      <pubDate>Fri, 07 Feb 2020 17:42:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/cpp14_lambda_usage/</guid>
      <description>1 嵌套lambda表达式 写一个lambda表达式A，其入参是一个lambda表达式B：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;iostream&amp;gt; namespace example01 { template&amp;lt;typename Func&amp;gt; void run_task(Func &amp;amp;&amp;amp;func) { int arg = 100; printf(&amp;#34;1.</description>
    </item>
    
    <item>
      <title>Go select多路复用, 实现超时机制</title>
      <link>https://forrestsu.github.io/posts/go/select-in-go/</link>
      <pubDate>Wed, 18 Dec 2019 20:19:15 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/select-in-go/</guid>
      <description>1 Preface 我们在 Linux 服务端编程的时候，select/epoll 可以监控多个fd, 并且可以指定超时时间。 那么我们在Go 里面也有select 关键字，那么怎么实现超时机制呢？
在 select 中加入一个 timer channel
 case rc2 := &amp;lt;-time.After(d):
 After等待持续时间过去，然后在返回的通道上发送当前时间。 它等效于NewTimer(d)。 在计时器触发之前，底层的计时器不会由垃圾收集器恢复。 如果需要提高效率，请改用NewTimer，如果不再需要计时器，请调用Timer.Stop。
完整代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  // 采用 select 实现超时 func TestSelectTimeOut(t *testing.</description>
    </item>
    
    <item>
      <title>Go 反射</title>
      <link>https://forrestsu.github.io/posts/go/reflection-in-go/</link>
      <pubDate>Tue, 17 Dec 2019 18:10:48 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/reflection-in-go/</guid>
      <description>1 Preface  反射是程序在运行时检查变量和值, 并获取到它们的类型的能力。
 很多主流语言都提供了反射语法特性，比如Java, python等; C++语言本身不支持反射， 但是第三方库实现了反射特性, 比如 google 的 protobuf。
如果支持反射，解决某些场景的问题，可以变得简单。 比如通过struct/class, 生成对应的建表语句，根据生成 insert 语句(批量将CSV导入数据库)等。
在之前的文章中，我们了解了如何在 Java/C++ 中使用反射：
 Java-反射机制 protobuf-反射  2 Go 反射 Go语言中使用空的接口，表示任一类型(可以理解为Any, 或者Java 中的 Object)</description>
    </item>
    
    <item>
      <title>etcd 服务注册与发现（一）</title>
      <link>https://forrestsu.github.io/posts/highavailable/etcd-high-available/</link>
      <pubDate>Wed, 27 Nov 2019 23:59:19 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/highavailable/etcd-high-available/</guid>
      <description>1 Preface 最近 C++ 后台微服务组件，考虑使用etcd集群，替换 zookeeper 集群。
这篇先讨论实现服务的注册与发现，节点的上线和下线通知。后面讨论服务的负载均衡。
 etcd基于raft协议，通过复制日志文件的方式来保证数据的强一致性。 在etcd之前，常用的是基于 paxos 协议的 zookeeper。
 2 etcd 介绍 etcd是一个golang编写的分布式、高可用的一致性键值存储系统，用于提供可靠的分布式键值(key-value)存储、配置共享和服务发现等功能。 etcd可以用于存储关键数据和实现分布式调度，在现代化的集群运行中能够起到关键性的作用。
2.1 etcd 应用场景  服务注册，发现 负载均衡等  3 服务注册与发现-方案 我们的微服务采用C++编写，一种思路是考虑使用 etcd v3 C/C++ Client API 和ectd 直接通信；</description>
    </item>
    
    <item>
      <title>MySQL: 一条SQL语句是如何执行的？</title>
      <link>https://forrestsu.github.io/posts/cs/how-is-a-sql-statement-executed-by-mysql/</link>
      <pubDate>Fri, 11 Oct 2019 20:12:34 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cs/how-is-a-sql-statement-executed-by-mysql/</guid>
      <description>1 MySQL 基本架构 MySQL基本架构示意图 2 日志系统 与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们要讨论 的主角：redo log（重做日志）和 binlog（归档日志）。
如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。 不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。
2.1 重要的日志模块：redo log </description>
    </item>
    
    <item>
      <title>TodoList</title>
      <link>https://forrestsu.github.io/todo/</link>
      <pubDate>Thu, 10 Oct 2019 11:28:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/todo/</guid>
      <description>20170224   1 libaio
  2 linux epoll
  3 select 和 epoll 的区别
  3 System v消息队列
msgsnd() msgrcv() 函数
  5 eventfd demo</description>
    </item>
    
    <item>
      <title>什么是鸭子类型(duck typing)</title>
      <link>https://forrestsu.github.io/posts/go/duck-type/</link>
      <pubDate>Sat, 10 Aug 2019 19:34:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/go/duck-type/</guid>
      <description>&lt;h2 id=&#34;1-duck-type&#34;&gt;1 duck type&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://forrestsu.github.io/images/hk-victoria-harbor-duck.jpg&#34; alt=&#34;duck-type&#34;&gt;&lt;/p&gt;
&lt;p&gt;比如在 python 中，有很多 &lt;code&gt;file-like&lt;/code&gt; 的东西，比如 StringIO, GzipFile, socket;
它们有很多相同的方法，我们把它们当作文件使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>五种 IO 模型</title>
      <link>https://forrestsu.github.io/posts/io/io-model/</link>
      <pubDate>Mon, 11 Mar 2019 17:41:47 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/io/io-model/</guid>
      <description>1 Preface 同步 (synchronous IO) 和异步 (asynchronous) IO，阻塞 (blocking) IO和非阻塞(non-blocking) IO分别是什么，到底有什么区别？ 这个问题不同的人给出的答案可能不同。为不同的人的知识背景不同，并且在讨论这个问题的时候上下文(context)也不相同。
我们这里讨论的背景是Linux环境下的network IO， 本文参考 Richard Stevens 2003 年的传世之作 1 ，如果英文够好的话，推荐直接阅读。Stevens的文风是有名的深入浅出，所以不用担心看不懂。
2 五种 I/O 模型  blocking I/O nonblocking I/O I/O multiplexing (select and poll) signal driven I/O (SIGIO) asynchronous I/O (the POSIX aio_functions)  再说一下IO发生时涉及的对象和步骤。</description>
    </item>
    
    <item>
      <title>系统调用之 restart_syscall</title>
      <link>https://forrestsu.github.io/posts/linux/restart-syscall/</link>
      <pubDate>Tue, 25 Dec 2018 17:33:53 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/linux/restart-syscall/</guid>
      <description>&lt;p&gt;在我们使用&lt;code&gt;strace -p pid&lt;/code&gt; 的时候，经常会遇到如下情景：&lt;br&gt;
&lt;img src=&#34;https://forrestsu.github.io/images/unix_restart_syscall.png&#34; alt=&#34;restart_syscall&#34;&gt;&lt;/p&gt;
&lt;p&gt;restart_syscall 究竟是个什么系统调用呢？什么时候会用到该系统调用呢?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Red Black Tree (01)</title>
      <link>https://forrestsu.github.io/posts/algorithm/red-black-tree-01/</link>
      <pubDate>Mon, 19 Nov 2018 15:00:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/algorithm/red-black-tree-01/</guid>
      <description>1 BST BST (Binary Search Tree) 二叉搜索树, 在key 恰好有序的时候，会退化成链表。
Conclusion  BST 的查询复杂度取决于树的高度, 树的高度即最大比较次数。 一棵具有 N 个 node 的 BST 树高(height)取值范围为：logN ≤ height ≤ N  因此，BST越平衡，在树中查找的时间就越短，连带地插入，删除也会变得效率更高。
红黑树的特征 红黑树（RBT）是节点涂了「颜色」的二分搜索树（BST），借助颜色控制，能够保证在 RBT 中，最长路径(path)不会超过最短路径的2倍（若最短的路径是5，最长的路径至多只能是10），如此，RBT便能够近似地视为平衡，如下图：</description>
    </item>
    
    <item>
      <title>Multithreading-with-ZeroMQ</title>
      <link>https://forrestsu.github.io/posts/cpp/multithreading-with-zeromq/</link>
      <pubDate>Tue, 30 Oct 2018 19:50:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/multithreading-with-zeromq/</guid>
      <description>本文翻译自ZeroMQ文档的一小部分内容, 该段落提供了解决多线程问题的一个绝佳方式。 这是前辈30多年的并发编程经验之谈！ 点击阅读原文：Multithreading-with-ZeroMQ
Preface ZeroMQ(又称为ØMQ,0MQ,或zmq)看起来像一个可嵌入的网络编程库, 但用起来更像是一个并发框架。 它为你提供的套接字(sockets), 能以进程间, 进程内, TCP 和多播等多种方式传输原子消息。 你可以用fan-out, pub-sub, 任务分发, 和 req-rep 等多种模式, 给套接字建立多对多的连接。 它速度之快足以构建集群产品。
它的异步IO模型可供你编写作为异步消息处理任务的可扩展的多核应用。 它有几十个API, 能运行在大多数的操作系统上。 ZeroMQ源自IMatix并按LGPLv3许可开放源码。
Multithreading-with-ZeroMQ ZeroMQ有可能是编写多线程应用的最佳方式。 然而, 如果你习惯于使用传统套接字, 那么ZeroMQ套接字你需要重新适应一下, ZeroMQ多线程编程将会把你知道的关于多线程应用的一切, 统统堆到院子里, 浇上汽油, 再点一把火。 该烧的书是很少的, 但大部分关于并发编程的书都是。</description>
    </item>
    
    <item>
      <title>Zookeeper&#43;Kafka集群搭建方案</title>
      <link>https://forrestsu.github.io/posts/highavailable/zookeeper-kafka-cluster-deployment-plan/</link>
      <pubDate>Tue, 30 Oct 2018 19:50:19 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/highavailable/zookeeper-kafka-cluster-deployment-plan/</guid>
      <description>Preface Zookeeper是一个高性能分布式应用协调服务
 Naming Service 配置管理 Leader Election 服务发现 同步 Group Service Barrier 分布式队列(其实zookeeper并不适合作为分布式队列，性能不高只不过在特定场合可以) 两阶段提交  Zookeeper工作方式
 Zookeeper集群包含一个1个Leader，多个Follower 所有的Follower都可提供读服务 所有的写操作都会被forward到Leader Client与Server通过NIO通信 全局串行化所有的写操作 保证同一客户端的指令被FIFO执行 保证消息通知的FIFO  与Kafka读写操作不一样，Kafka只有Leader提供读写操作。
说明 搭建zookeeper和Kafka集群： 本实验拥有3个节点，均为CentOS 7系统，且均有相同用户名 （本实验为 opadm）</description>
    </item>
    
    <item>
      <title>慎独</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E6%85%8E%E7%8B%AC/</link>
      <pubDate>Thu, 27 Sep 2018 09:41:29 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E6%85%8E%E7%8B%AC/</guid>
      <description>1 progress 1 Make your own decisions
慢慢看的人越来越多，得注意尽量避免个人的主观因素，以免误人子弟！_
2 后续思考 应该做更标准的东西，每个客户拿到的发布包应该一样。就像肯德基麦当劳，你在哪里吃的口味都一样。
3 应该做更互联网一点的东西。
4 有些人是很固执的，总觉得别人回答他的问题是理所应当，我逐渐体会到王垠曾经有过的感受，当你好心帮助别人成长，别人却因为理解不了反过来打击你！暴露了自己的弱点，下意识的自我保护。
切记！切记！切记！ 只能有极少数人才能真正得到你的帮助，因为你自己时间有限，还得自己成长！
可能确实是我的方式不对，今后只有遇到自己适合帮助的人，才可以花点时间；与其帮助那些不虚心，又自大的人，还不如看看博客来的舒畅！</description>
    </item>
    
    <item>
      <title>午夜梦醒十分</title>
      <link>https://forrestsu.github.io/posts/life/%E5%8D%88%E5%A4%9C%E6%A2%A6%E9%86%92%E5%8D%81%E5%88%86/</link>
      <pubDate>Mon, 17 Sep 2018 06:08:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%8D%88%E5%A4%9C%E6%A2%A6%E9%86%92%E5%8D%81%E5%88%86/</guid>
      <description>梦到我爷爷在不久的未来将离我而去，梦里是那么真实，是一个穿T恤的夏天，在我家门口的大红枣树下，还记得红枣树是奶奶刚嫁到我家时种下的；梦里未来的我已攒够了7位数的积蓄，开始组建自己的家；梦里是我爷爷肾好像得了急性炎症，匆忙之间就离开了，来不及说一声再见，我看着树上挂着一颗颗熟透的红枣，瞬间眼睛湿润了！ 今年抽个空，去给爷爷做个健康体检。</description>
    </item>
    
    <item>
      <title>eventfd 入门</title>
      <link>https://forrestsu.github.io/posts/linux/eventfd-introduction/</link>
      <pubDate>Sun, 12 Aug 2018 01:50:45 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/linux/eventfd-introduction/</guid>
      <description>1 eventfd 是什么 eventfd 是linux内核一个计数器，主要用于进程间或者线程间，高效的事件通知。
它也是一个系统调用，在内核空间进行计数，用于事件通知 (since linux 2.6.22)。
eventfd 也是一个fd，同样可以使用read/write进行读写操作，本质上是eventfd实现了read/write接口（里氏替换）。
更详细的可以查看 man eventfd
1 2 3  #include &amp;lt;sys/eventfd.h&amp;gt; int eventfd(unsigned int initval, int flags);   eventfd() 创建一个 eventfd 对象，可以由用户空间应用程序实现事件等待/通知机制， 或由内核发送事件通知, 到用户空间的应用程序。</description>
    </item>
    
    <item>
      <title>kafka安装</title>
      <link>https://forrestsu.github.io/posts/library/kafka%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 31 Jul 2018 10:34:54 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/library/kafka%E5%AE%89%E8%A3%85/</guid>
      <description>Install zookeeper cp conf/zoo-sample.cfg conf/zoo.cfg vi conf/zoo.cfg 主要修改配置文件中，数据目录的位置。
启动zookeeper服务 bin/zkServer.sh start
kafka 2.12 修改配置文件: config/zookeeper.properties 修改数据目录：
dataDir=/home/hadoop/zk #因为zookeeper变更为zk,所以需要在这里修改一下 启动zookeeper
bin/zookeeper-server-start.sh config/zk.properties 启动kafka服务器（broker）
启动kafka服务器（broker） </description>
    </item>
    
    <item>
      <title>Simple Binary Encoding</title>
      <link>https://forrestsu.github.io/posts/architecture-thinking/simple-binary-encoding/</link>
      <pubDate>Sat, 09 Jun 2018 20:29:57 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture-thinking/simple-binary-encoding/</guid>
      <description>金融系统通过发送大量不同格式的消息进行通信。当人们使用类似“巨量的”这一类术语时，我正常会想 “真的..是多少？” 因此，让我们为金融行业量化“巨大”。</description>
    </item>
    
    <item>
      <title>git 源码学习</title>
      <link>https://forrestsu.github.io/posts/library/git-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Sun, 03 Jun 2018 23:57:22 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/library/git-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</guid>
      <description>Preface 最近趁上一个工作任务刚结束，新的任务还在规划中，难得清闲几天，可以抽点时间来看下 Linus 大神在2005年写的 git，为了简单，理解git 的原理，我们可以 checkout 刚开始的版本 比如hash为 79517a067。 这个版本总代码量只有1491 行。
Compile 依赖包：libssl-dev、zlib 修改编译选项：Makefile中LIBS 增加 -lcrypto 编译完之后会生成可执行文件： update-cache show-diff init-db write-tree read-tree commit-tree cat-file fsck-cache checkout-cache
Analysis 1 init-db 初始化工作目录： 在当前路径下创建目录，</description>
    </item>
    
    <item>
      <title>what do you want？</title>
      <link>https://forrestsu.github.io/posts/life/what-do-you-want/</link>
      <pubDate>Sun, 03 Jun 2018 23:04:10 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/what-do-you-want/</guid>
      <description>1 你真正想要的是什么？这个问题一直在我身边，挥之不去，甚至在你做一些决策时，还挡在你面前，寸步难行。
摩西奶奶 说：人生只有一次，去做自己喜欢的事。</description>
    </item>
    
    <item>
      <title>关于股市</title>
      <link>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/%E5%85%B3%E4%BA%8E%E8%82%A1%E5%B8%82/</link>
      <pubDate>Wed, 09 May 2018 19:34:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/%E5%85%B3%E4%BA%8E%E8%82%A1%E5%B8%82/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://forrestsu.github.io/images/about-stock.jpg&#34; alt=&#34;about-stock&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;preface&#34;&gt;Preface&lt;/h2&gt;
&lt;p&gt;　　对于大多数散户来说，刚入市就会有这样一种感觉：「一买就跌，一跌就卖，一卖就涨，一涨就追，一追就套，一套就割，一割就飚，革命尚未成:) 」。看起来股市就是“反常”的，也许这才是股市独有的魅力。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Reflection in protobuf (C&#43;&#43;/Java)</title>
      <link>https://forrestsu.github.io/posts/library/reflection-in-protobuf-cpp-java/</link>
      <pubDate>Fri, 27 Apr 2018 21:56:39 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/library/reflection-in-protobuf-cpp-java/</guid>
      <description>最近工作中，需要做一些消息动态解析，因为使用的 protobuf，考虑使用protobuf的反射特性。
1 reflection in C++ 在c++中使用protobuf 反射
1 2 3 4 5 6 7 8 9 10 11  package com.sunquan;message Login { optional int64 userid = 1; optional string username = 2; // name  optional string password = 3; // passwd  optional string email = 4; optional string nickname = 5; // etc .</description>
    </item>
    
    <item>
      <title>异步编程之 CPS</title>
      <link>https://forrestsu.github.io/posts/architecture-thinking/asynchronous-programming-cps/</link>
      <pubDate>Fri, 20 Apr 2018 22:44:50 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture-thinking/asynchronous-programming-cps/</guid>
      <description>1 Preface 后继传递风格(continuation-passing style CPS wiki) 具体解释请阅读wiki。
CPS 最初在1970年代作为一种编程风格出现，主要用于函数式编程； 在1980年代到1990年代期间，其作为高级编程语言的编译器的一种中间表达形式开始崭露头角。
现在，CPS作为非阻塞系统（通常是分布式）的一种编程风格被再次发掘出来。
1.1 CPS in Haskell 我们使用Haskell 实现勾股定理(Pythagorean theorem) 计算斜边的长度。 传统的实现如下：
1 2 3 4 5 6 7 8  square :: Double -&amp;gt; Double square x = x * x add :: Double -&amp;gt; Double -&amp;gt; Double add x y = x + y pythagorean :: Double -&amp;gt; Double -&amp;gt; Double pythagorean x y = sqrt (add (square x) (square y))   然后我们将其改造成 CPS 的方式，如下：</description>
    </item>
    
    <item>
      <title>25岁的迷茫</title>
      <link>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/25%E5%B2%81%E7%9A%84%E8%BF%B7%E8%8C%AB/</link>
      <pubDate>Sun, 15 Apr 2018 19:50:09 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/25%E5%B2%81%E7%9A%84%E8%BF%B7%E8%8C%AB/</guid>
      <description>25岁的迷茫 慢慢的一年一年，开始慢慢有些焦虑和迷茫，焦虑着未来的不确定，思考着和大多少数人的轨迹一样，追求简简单单的幸福，平凡地过完这一生。有一点小确幸，没有太大的想法，走一步看一步，吭哧吭哧到了25岁，一步一步被时间的齿轮推着向前走。突然让你自己决定走向何方，却又徘徊犹豫，不知该往哪走。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; RAII</title>
      <link>https://forrestsu.github.io/posts/cpp/c&#43;&#43;-raii/</link>
      <pubDate>Tue, 10 Apr 2018 11:01:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c&#43;&#43;-raii/</guid>
      <description>什么是RAII ? 　RAII即“Resource Acquisition Is Initialization”，也称为“资源获取即初始化”。是C++语言的一种管理资源、避免泄漏的惯用法。利用的就是C++构造的对象最终会被销毁的原则。 RAII的做法是使用一个对象，在其构造时获取对应的资源，在对象生命期内控制对资源的访问，使之始终保持有效，最后在对象析构的时候，释放构造时获取的资源。</description>
    </item>
    
    <item>
      <title>2018 年会-Plan</title>
      <link>https://forrestsu.github.io/posts/work/2018-%E5%B9%B4%E4%BC%9A-plan/</link>
      <pubDate>Thu, 15 Mar 2018 21:14:22 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/2018-%E5%B9%B4%E4%BC%9A-plan/</guid>
      <description>plan 1 如果你是CEO或 CTO, 2018你想做什么？ 说出你有创意的idea, 可以异想天开。
平行世界，未来已来。
区块链，比特币
1 我们现在在做的 ems2.0 Al 日常运维。
正准备做的 ems3.0 seastar dpdk coroutine&amp;hellip;
我想做 ：
理财平台
智能投顾
大数据
语言的技巧很重要，很多时候用言语表达出来的都是浅薄的，很多时候说的多反而起不到好的效果。
通过这一次年会，我也发现了一些我不喜欢的</description>
    </item>
    
    <item>
      <title>2018年会</title>
      <link>https://forrestsu.github.io/posts/work/2018%E5%B9%B4%E4%BC%9A/</link>
      <pubDate>Thu, 15 Mar 2018 21:10:25 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/2018%E5%B9%B4%E4%BC%9A/</guid>
      <description>2018-03-09 记于十三陵 1 如果你是CEO或 CTO, 2018你想做什么？ 说出你有创意的idea, 可以异想天开。
平行世界，未来已来。
区块链，比特币
1 我们现在在做的 ems2.0 Al 日常运维。
正准备做的 ems3.0 seastar dpdk coroutine&amp;hellip;
我想做 ：
理财平台
智能投顾
大数据
 语言的技巧很重要，很多时候用言语表达出来的都是浅薄的，很多时候说的多反而起不到好的效果。
通过这一次年会，我也发现了一些我不喜欢的。</description>
    </item>
    
    <item>
      <title>公司的成长史</title>
      <link>https://forrestsu.github.io/posts/work/%E5%85%AC%E5%8F%B8%E7%9A%84%E6%88%90%E9%95%BF%E5%8F%B2/</link>
      <pubDate>Sat, 10 Mar 2018 19:01:18 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E5%85%AC%E5%8F%B8%E7%9A%84%E6%88%90%E9%95%BF%E5%8F%B2/</guid>
      <description>preface 最近Boss 开了例会，谈了下公司的发展史。听着挺有意思，于是决定记录下来。
 </description>
    </item>
    
    <item>
      <title>Seastar 入门</title>
      <link>https://forrestsu.github.io/posts/archi-seastar/seastar-started/</link>
      <pubDate>Tue, 27 Feb 2018 14:00:04 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/archi-seastar/seastar-started/</guid>
      <description>1 what is Seastar 这篇文章将介绍一下 Seastar : 一个在现在多核机器上编写高效复杂的服务器应用程序的 C++ 库。
有些框架非常高效，但只允许构建简单的应用程序（eg: DPDK 允许单独处理数据包的应用程序）, 而其他框架则允许构建极其复杂的应用程序，代价是运行时效率。Seastar 是我们尝试获得两全其美的方法：创建一个允许构建高度复杂的服务器应用程序并实现最佳性能的库。
2 起源 Seastar 的灵感和首例使用案例是ScyllaDB，重写了Apache Cassandra，Cassandra 是一个分厂复杂的应用，同时通过 Seastar，我们能够重新实现吞吐量提高10倍，以及显着降低和更一致的延迟。 Seastar提供了一个完整的异步编程框架，它使用两个概念 - 期货和延续 - 统一表示和处理每种类型的异步事件，包括网络I/O，磁盘 I/O 以及其他事件的复杂组合。
由于现代多核和多插槽机器在核心之间共享数据（原子指令，高速缓存行反弹和内存隔离）具有陡峭的惩罚，Seastar程序使用无共享编程模型，即可用内存在内核之间分配，每个内核都在其内存部分进行数据处理，内核之间的通信通过显式消息传递进行（当然，这本身就是使用SMP的共享内存硬件发生的）。</description>
    </item>
    
    <item>
      <title>Thinking coroutine thread async</title>
      <link>https://forrestsu.github.io/posts/architecture-thinking/thinking-coroutine-thread-async/</link>
      <pubDate>Thu, 08 Feb 2018 22:32:16 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture-thinking/thinking-coroutine-thread-async/</guid>
      <description>从最开始的C语言，同步编程，后来工作了，慢慢开始写异步代码，逐渐有了一些自己的思考和想法。同样都是写业务代码，如何写出高性能，易维护，简洁的 code？ 现有的编程框架有哪些局限性？ 我们来回顾下，业务代码中一个常见的模型：生产者消费者(围笑)! 我们来看下生产者消费者最简单的情况： 一个生产者线程，一个消费者线程，一个共享的queue，为了防止并发冲突，再加上 lock/semaphore 。 随着业务接口慢慢增多，一个接口每次都搞 2个线程，线程数和queue 也线性增加，写代码就慢慢变成了 copy/paste。总得想点什么办法吧！ 于是搞个异步, 我们就写自己数据处理函数。
异步编程</description>
    </item>
    
    <item>
      <title>2018 Vision Hubble</title>
      <link>https://forrestsu.github.io/posts/work/2018-vision-hubble/</link>
      <pubDate>Mon, 05 Feb 2018 02:21:10 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/2018-vision-hubble/</guid>
      <description>1990年4月24日 Hubble Space Telescope
Preface 和往常一样，今天又领到一笔资本主义安慰，一切都很安逸。CTO 会上开玩笑说：&amp;ldquo;软件不出Bug，每个月领着固定的薪水，生活就这样保持现状，多好！ 最好什么都不要变，生活就保持现状！如果说,把每个人的薪资都提高一倍，我想就没人干活了，生活太安逸了。反过来，如果把每个人的薪资都降到5k，我想大家一定拼命写！写简历&amp;hellip;(哈哈)&amp;rdquo;
很有同感，之前在HS的时候，感觉自己用的东西太low，偶尔夜里做恶梦跟不上技术的革新，用着大家都淘汰的东西，失落就像坠落悬崖。涉及生存的时候，会拼命努力，去追求。
现在环境好了，每天都睡的很好，但是越是需要危机感。做技术是需要有存量的，就像爬山，觉得洪水只能淹没到山脚，爬到半山腰就好了；如果爬到山顶，那么洪水淹到半山腰也行；如果还有余力,造一架直升飞机也行。技术没有止境，尽力追求完美。
那么，2018 需要做点什么呢？是的，我们需要做一个亚毫秒级的高性能交易系统。
Vision-2018 high availability, high throughput, low latency。
 亚毫秒级，更一致的延时控制； 更灵活，更线性化的横向扩展； 更高效的编程模型与调试手段，提高软件质量。
(与硬件结合的通信体系)
CTO 给这个项目叫做：Hubble项目  Grouping 我们划分了如下调研方向，每个方向成立一个小组：
在这个过程中提升个人的领导力，提升个人的能力和价值。</description>
    </item>
    
    <item>
      <title>echarts 数据可视化-初体验</title>
      <link>https://forrestsu.github.io/posts/web/echarts-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Fri, 12 Jan 2018 01:04:49 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/web/echarts-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>Preface 　欠缺架构方面的能力，又困于实现业务需求，数据可视化感觉是锦上添花的需求。但是这方面的能力还是很欠缺，最近看了AlphaGo 2017的电影，发现 DeepMind team 数据可视化做的很不错，特别是李世乭 第三局 赢了AlphaGo 的时候，后台 AlphaGo 呈现各个 state 输赢的概率一目了然(不清楚 state 的童鞋可以看下之前写的一篇 MCTS 的译文) 。真正做AI的基础还是数据分析，神经网络可以在海量数据里面寻找 和 发现规律， 但是人类还是很难理解； 如果用把数据 图表或者 投射高维空间，应该能让我们有直观的感受。
Problem 实现一个简单的需求，实时动态展示 一只股票的价格和预测价格，预测价格采用最简单的深度神经网络模型(DNN) 。
Prepare 当初毕设论文的曲线图还是用Excel 生成的，数学系的可能会用matlabplot 来绘图，再geek一点的就用Τex这种国际上通用的玩法了。 之前用过 highcharts, 潜意识下数据可视化 找一个强大的JS库就好了， 可以快速出成品。咨询tqd, 推荐使用baidu的echarts，看完官网 examples，感觉好强大，官方入门文档还是蛮不错的！ 配合Demo，2小时就可以学完基本的API。</description>
    </item>
    
    <item>
      <title>Talk with cto</title>
      <link>https://forrestsu.github.io/posts/work/talk-with-cto/</link>
      <pubDate>Mon, 08 Jan 2018 00:19:26 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/talk-with-cto/</guid>
      <description>2018-01-03 Wed 13:00 北京华贸中心 2 floor
备注：采用流水账的方式写下来了，有些地方可能表述有误的，请指正.
谈话记录 谈话主要以QA的方式展开,如下:
基本面 luke: 你是什么时候来公司的？
sq: 今年4月10日，来名策有8个月了。
luke: 在恒生工作了几年？
sq: 算上实习期 共2年。
luke: 在恒生的工作怎么样？是不是学到了很多东西？
sq: 还可以，主要了解了一些开发流程和规范性的东西，主要感觉开发效率太低，一个消息的改动，前中后台都得修改。
luke: 恒生不是也有中间件吗？
sq: 是的，但是都是封装好的，开发的时候也只能看到对应的api，遇到问题还得找研发中心解决。
luke: 当初在恒生你也是跟张前平做事的？
sq: 恩，当时我们那个产品部，遇到比较难的技术问题都找他解决的，比如sql死锁，程序Crash等。</description>
    </item>
    
    <item>
      <title>计算机系统组成</title>
      <link>https://forrestsu.github.io/posts/cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/</link>
      <pubDate>Sat, 06 Jan 2018 15:38:19 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cs/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/</guid>
      <description>1 不用goto 原因： (1) 可能会破坏程序的局部性原理，会导致cache失效，从而降低执行效率。 (2) 程序的逻辑变得混乱，不利于程序的维护和bug排查。</description>
    </item>
    
    <item>
      <title>工作总结-2017年</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-2017%E5%B9%B4/</link>
      <pubDate>Mon, 01 Jan 2018 01:42:05 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-2017%E5%B9%B4/</guid>
      <description>Preface 这一年，我开始了人生的第二份工作；这一年，我开始堕入股市:)； 这一年，我开始追美剧；这一年，开始独自一个人生活；这一年，第一次喝了二两茅台；这一年，第一次把别人的车给刮了:(；第一次参加音乐节；第一次滑雪；第一次，收到读者打赏；第一次被「linkedin中国」编辑转载；这一年，在简书上一共更新了50篇文章(当然质量有待提升)；尝试自己做决定，对人对事逐渐有了不同的看法，时常幻想如果现在的我再去读当年的高中或大学，会不会是另一幅风景:).
Work 4月份换了一份新工作，到北京一家创业小公司，有初恋的感觉，老板的谈吐之间，很多价值观都有认同感。用着自己熟悉和喜欢的语言Unix C/C++，开发效率很高，CTO和同事有时候会搞个技术分享会，很有在学校实验室的感觉。 7月初开始调研cuda，并实现期货高频的参数计算，真金白银实盘开始测试，一个月陆续亏损10W，Boss遂决定做AI基金。
Life 在帝都有3个大学同学，4月份刚来的时候，就在同学那里下榻，平时有事没事就一起聚聚，唱唱歌，聚聚餐，周边自驾游，业余生活也丰富了不少，很是惬意，心存感恩和敬畏。 7月29日参加2017张北草原音乐节，音乐人的歌很嗨，草原的天很蓝，花也美。 10月1日，带爷爷在北京畅游了2日，去了天安门。爷爷说：“人民大会堂会场好小，感觉没有新闻联播里的大。” 去颐和园“爬山”，这时候要是懂点历史就好了! 长城爬了北八楼，万木枯荣，还是更喜欢夏日的温热和青葱。 老板隔三差五带我们出去搓一顿，打打牙祭，尤其钟爱大龙虾，哈哈。 参加了一场小朋友的Artists Show，应该努力活的像个小孩。
Growing up 2017年1月31日，和当年高一的同学(glp&amp;amp;syk)去一中回忆往昔，当年的宿舍楼重建了，也装了空调，老同学也在为生活和工作奔波。 2017年2月4日和 ljd 在长沙小聚，聊到了AI和物联网，然后下半年我就真的开始接触AI.阁中小聚(ljd) 3月- 4月的时候，一边上班一边纠结是否需要离职，感觉慢慢的变成了一颗螺丝钉，继续待下去3~4年的未来都可以预见！然后咨询了贺老、浩哥，于是决定换个环境。一边投递简历，准备电话面试，一边补技术空缺，毕竟写了1.5年的业务代码。 3月底，前导师投来橄榄枝，于是决定北漂。入职后开始熟悉新系统，得益于大学写的算法，工作上手很快，写了T0模块，用 cuda 在GPU 实现 Order Imbalance 模型，重构策略宝资讯前后台，9月份的时候老板开始要做机器学习。现在主要负责系统的行情模块，探索LSTM如何来预测股价。</description>
    </item>
    
    <item>
      <title>谈谈mutable/unmutable传值/传地址</title>
      <link>https://forrestsu.github.io/posts/languages/%E8%B0%88%E8%B0%88mutable-unmutable%E4%BC%A0%E5%80%BC-%E4%BC%A0%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Mon, 18 Dec 2017 18:27:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/languages/%E8%B0%88%E8%B0%88mutable-unmutable%E4%BC%A0%E5%80%BC-%E4%BC%A0%E5%9C%B0%E5%9D%80/</guid>
      <description>1 传值/传地址 传地址也可以看成一种特殊的传值，只是这个值会被解析成地址。在C++里面传值更多的时候指的是对象拷贝。 传地址主要：1 为了简化程序逻辑，效率不再生成一个对象的副本。</description>
    </item>
    
    <item>
      <title>中兴程序员事件</title>
      <link>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/%E4%B8%AD%E5%85%B4%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sun, 17 Dec 2017 11:05:25 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/%E4%B8%AD%E5%85%B4%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;前天有人发中兴有个42岁老程序员跳楼了，看完没有太多同情，可能你会觉得我有点冷血！
互联网行业裁员是再正常不过的事，「Silicon Valley」里面就有很多互联网公司倒闭或者裁员重组，一个事业部的好坏对公司而言主要看业绩和盈利，当利润太低，又明显觉得这种业务模式将要淘汰，公司管理层就会出来调整，如果情况好一点公司会看在过去的业绩让你自己选择转型，或是被拆分重新分配到其他部门。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>是的，我不想再回家乡了</title>
      <link>https://forrestsu.github.io/posts/life/%E6%98%AF%E7%9A%84%E6%88%91%E4%B8%8D%E6%83%B3%E5%86%8D%E5%9B%9E%E5%AE%B6%E4%B9%A1%E4%BA%86/</link>
      <pubDate>Sun, 26 Nov 2017 21:19:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E6%98%AF%E7%9A%84%E6%88%91%E4%B8%8D%E6%83%B3%E5%86%8D%E5%9B%9E%E5%AE%B6%E4%B9%A1%E4%BA%86/</guid>
      <description>2017年，我从毕业到工作的第三个年头，这一年开始慢慢对一些事，有不同的看法和理解，开始关心我们周遭的社会，慢慢的开始变得成熟；开始质疑大人们曾经苦口婆心的建议，发现很多时候他们说的并不对；开始有自己的想法，参考优秀人的建议；开始自己做选择，。
是的，我不想再回家乡了！因为那里你看不到出路，大家都把希望寄托于下一代，觉得自己吃饭睡觉打打麻将活着就好。 亲缘关系维系的圈子迟早会慢慢瓦解，我也不想去花时间去维继这三大姑六大婶的关系，不想去掺和看似热闹的红白喜事；只想有三五知心好友常聚聚会，谈谈最近开心或者烦恼的事。你也许会觉得这不就是我们一直以来的生活，这么做简直就是忘本、是背叛呀！ 是的，我本无根，利益为本，相互之间利益依存，遵守契约才是本，当然这不是他(她) 们的错， 家乡，</description>
    </item>
    
    <item>
      <title>帝都生活杂感(2)</title>
      <link>https://forrestsu.github.io/posts/life/%E5%B8%9D%E9%83%BD%E7%94%9F%E6%B4%BB%E6%9D%82%E6%84%9F2/</link>
      <pubDate>Tue, 21 Nov 2017 23:51:27 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%B8%9D%E9%83%BD%E7%94%9F%E6%B4%BB%E6%9D%82%E6%84%9F2/</guid>
      <description>20171121 星期二 生活杂感　Efficiency 　有时候给了别人很大期望，展现在别人面前你很能干，那是你全身心投入做一件事的时候，开足了120码，你就会发现你的效率很高。 一旦你分心去忙其他的事的时候(炒股)，你就会发现开始力不从心，分配的工作开始不能按期完成，一拖再拖。最近一个很厉害的同事离职，去了一家做 Ｍanless Driving 的创业公司，很多事都得我去handle，不能像以前，上面有个人替你扛着，安静的“划水”了。
Just Alive 　外卖，快递小哥，这群活在底层的“工人”，他们在北京一无所有，只有一条命把握在自己手上，但是他们维持着整个北京城的光鲜，让我们感觉幸福的活着。等到下次 20 大召开的时候，他们还是被“禁止进入”北京城。
Encourage 　生活没有看起来那么美好，只是感觉安逸的时候危机就开始发芽。有时候想想自己还是一无所有，但能够给予的时候也是很快乐。现在所面临的领域也是一无所知，需要解决的问题也无从下手，所以忘掉你引以为傲的武功招式，此时此刻一切归零，像一个新手一样从头再来。切记！</description>
    </item>
    
    <item>
      <title>Web Design in 4 minutes</title>
      <link>https://forrestsu.github.io/posts/web/web-design-in-4-minutes/</link>
      <pubDate>Thu, 26 Oct 2017 23:44:48 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/web/web-design-in-4-minutes/</guid>
      <description>网页设计 4 分钟  假如你有一个产品，一个作品集，又或仅仅是一个想法，你想要在你的网站上与大家分享。在你发布在网络上之前，你想要让它看起来有吸引力，专业，或者至少看起来像样。 那么你需要做的第一件事是什么呢？
1 Content  设计的目的是增强你需要呈现的内容。这听起来似乎很明显，但是
2 Centering 长文字很难解析，同样也很难去阅读。设置每行字符数限制，极大地增强了文本块的可读性和吸引力。
1 2 3 4  body { margin: 0 auto; max-width: 50em; }   在对文本块进行样式化后，如何对文本自身进行样式化？
3 Font family 浏览器缺省的(英文)字体是 &amp;ldquo;Times&amp;rdquo;, 这可能看起来不那么吸引人(主要是因为它是 “unstyled” 字体)。选择一个无衬线字体(比如 “Helvetica&amp;rdquo; 或者 ”Arial“)，能够极大的改善你页面的外观。</description>
    </item>
    
    <item>
      <title>(译) 蒙特卡罗搜索树</title>
      <link>https://forrestsu.github.io/posts/cs/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E6%90%9C%E7%B4%A2%E6%A0%91%E8%AF%91/</link>
      <pubDate>Fri, 20 Oct 2017 00:54:53 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cs/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E6%90%9C%E7%B4%A2%E6%A0%91%E8%AF%91/</guid>
      <description>今天(2017-10-19) 看到一篇关于蒙特卡罗搜索树 (Monte Carlo Tree Search) 的文章，感觉写的非常好，决定尝试翻译一下，于是就有了这篇文章:)。
原文在这阅读原文。 1 What is MCTS? 　蒙特卡罗搜索树是 一个在人工智能(AI)问题中做出优化决策的方法，通常在组合游戏中移动规划。它将随机模拟的一般性与树搜索的精度相结合。 由于 AlphaGo 卓越的表现，并潜在应用于一些其他难题上，人们对MCTS的研究兴趣急剧上升。其应用范围超越了游戏，理论上 MCTS 可以应用于能用 {state，action} 来描述的任何领域，以及预测结果的 模拟。
2 Basic Algorithm 　基本的MCTS算法很简单：根据模拟当前状态的结果，逐个节点构建搜索树。该过程可以分为以下4个步骤：
 Selection 从根节点Root开始，递归地选择最佳子节点(后面详述)，直到到达叶节点L。 Expansion 如果L不是一个终止节点(游戏未结束)，然后创建一个或多个子节点并选择一个C。 Simulation 从C运行模拟输出，直到达到结果。(注：这里有点拗口，可以简单理解为当前节点输赢的概率） Backpropagation 用上一步得到的结果，反向更新当前搜索路径上的每个节点的值。  补充： (1) 每个节点必须包含两个重要的信息：基于模拟结果的估计值和它被访问的次数。 (2) 在最简单和最高记忆效率的实现中，MCTS将每次迭代添加一个子节点。根据具体的业务场景: 每次迭代添加多个子节点可能更好。</description>
    </item>
    
    <item>
      <title>下一个求职计划</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%B1%82%E8%81%8C%E8%AE%A1%E5%88%92/</link>
      <pubDate>Thu, 12 Oct 2017 11:19:27 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%B1%82%E8%81%8C%E8%AE%A1%E5%88%92/</guid>
      <description>1 先定一个求职方向
2 经常补充自己的简历。
放在github.io 上面</description>
    </item>
    
    <item>
      <title>编译-链接-笔记(1)</title>
      <link>https://forrestsu.github.io/posts/readingnotes/%E7%BC%96%E8%AF%91-%E9%93%BE%E6%8E%A5-%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 10 Oct 2017 11:23:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/%E7%BC%96%E8%AF%91-%E9%93%BE%E6%8E%A5-%E7%AC%94%E8%AE%B01/</guid>
      <description>1 函数的调用是用栈实现的，C常用的函数调用方式cdecl，c++采用一种新的thiscall 方式，主要是用于类成员的调用。
2 cdecl 参数压栈是从右向左，参数出栈由调用方 维护。
3 stdcall的参数出栈由 被调用的函数自己维护。</description>
    </item>
    
    <item>
      <title>推荐-小工具</title>
      <link>https://forrestsu.github.io/posts/tools/%E6%8E%A8%E8%8D%90-%E5%B0%8F%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 10 Oct 2017 10:40:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/%E6%8E%A8%E8%8D%90-%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid>
      <description>推荐个人最常用的Top10 便携自由(Free)的小软件。
Windows  cmder 一个类*nix的控制台,支持Git/ssh/常用的linux命令,炒鸡强大。 AutoHotkey 自定义全局热键 clover 资源管理器像浏览器一样显示多窗口 everything 快速查找磁盘文件(支持正则) (V1.3.4.686) Ditto 可以选择的粘贴板工具 GifCam Gif动画录制工具 chrome 及一系列插件 待补充&amp;hellip;  大家如果需要留言，可以直接回复*_*</description>
    </item>
    
    <item>
      <title>最好的告别</title>
      <link>https://forrestsu.github.io/posts/readingnotes/%E6%9C%80%E5%A5%BD%E7%9A%84%E5%91%8A%E5%88%AB/</link>
      <pubDate>Mon, 09 Oct 2017 20:24:56 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/%E6%9C%80%E5%A5%BD%E7%9A%84%E5%91%8A%E5%88%AB/</guid>
      <description>当我们谈论衰老与死亡这个话题，那么远却又那么近，确实这个话题有些悲伤，很多时候都刻意让自己不去想，但是我们必须得面对，或早或晚。以防那天突然来临，我们不至于恍然不知所措。 1 About Aging
2 Do Something？ 我们还面对一个貌似简单的谜题：当我们年老、体弱、不能照顾自己的时候，是什么使得生活值得过下去？
3 What should I do?</description>
    </item>
    
    <item>
      <title>red 语言初体验</title>
      <link>https://forrestsu.github.io/posts/languages/red-%E8%AF%AD%E8%A8%80%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Thu, 05 Oct 2017 01:38:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/languages/red-%E8%AF%AD%E8%A8%80%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>我第一次听到 red 这门语言是在2017-07-20，是通过陈天的一篇关于 red 的文章。正好趁十一，闲得浮生几日，来入个门。下面步入正题： red 目前最新的版本是0.6.3 (2017-10-05)
1 red 语言特性 我们首先来看下 red 语言的一些特性：
  1 red 是一门编译型语言，不走虚拟机，直接编译成目标平台的，和 C 代码同级别性能的二进制。编译时可以直接跨平台往 windows / linux / osx 等 target OS，以及 x86 / arm 等 target CPU 上面编译。</description>
    </item>
    
    <item>
      <title>We need some magic moments</title>
      <link>https://forrestsu.github.io/posts/life/we-need-some-magic-moments/</link>
      <pubDate>Sun, 24 Sep 2017 10:37:15 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/we-need-some-magic-moments/</guid>
      <description>We need some magic moments!
　好久不开的例会上周终于开了，Luke提了一个问题：我们小公司为什么能够活下来？因为我们能够不断创造一些 Magic Moments，就像生活需要一些仪式感一样。我们不要过早定义自己以后就是做什么的，生活在于体验不一样的人生。 有很多事觉得不可思议，但是慢慢就变成的现实。我来的时候觉得公司是一个做量化投资，用金融数学来做交易艺术。现在要开始做 AI 基金! 确实挺有意思(当初入职恒生后，做了一个 PPT, 用大数据来预测分析股票的创意)。 诚然 AI 基金看起来很难，毕竟不是自然规律和自然现象，这是人在股市上博弈，并且大家都在吸取教训，不断进步! 有个笑话说：散户只有7秒钟的记忆:) (围笑) 在小公司，Boss 可以投入成本去印证自己的想法，比如一个优秀的厨师一定很喜欢品尝自己做的菜，一个优秀的程序员一定很会使用自己写的软件。所以上周就实盘做了一次交易，但是感觉用起来还是挺厉害(哈哈)。Boss说:“ 现在学点AI，如果哪天公司倒闭了，你们出去也可以找个好点的工作！” 这样的老板真的挺有意思。 Calvin 提出了AI基金的创意，我想如果股票预测用一个能够自我学习的模型来做，这是一件非常 Cool 的事情。这个和文艺复兴技术公司 (Renaissance Technologies) 在1988 年创立的 对冲基金 的想法如出一辙，只不过走的路子不一样，是时候该创造一些 Magic Moments了。</description>
    </item>
    
    <item>
      <title>帝都生活随感</title>
      <link>https://forrestsu.github.io/posts/life/%E5%B8%9D%E9%83%BD%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%84%9F/</link>
      <pubDate>Sun, 27 Aug 2017 01:21:55 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%B8%9D%E9%83%BD%E7%94%9F%E6%B4%BB%E9%9A%8F%E6%84%9F/</guid>
      <description>傍晚小街路面上沁出微雨后的湿润，和煦的西风吹来，抬头看看天边的晚霞。嗯，明天又是一个好天气，走到水果摊旁，挑了个敲起来浊响的青绿西瓜，一边满心期待着皮薄肉厚瓤甜的爽落感，一边愉快的想着，刚理解线性回归和梯度下降模型关联起来，遗传算法用轮盘赌的概率来决定染色体是否杂交。 感受京都 不出来走走，永远不会知道这个外面的世界有多大。 离职的时候领导让我考虑存量与增量，我选择了增量。毕竟人生苦短，了解不同的领域，多认识几个有趣的人，多体验不一样的人生。
来北京之前，有人告诉我这里空气很差，地铁很拥挤。确实，每天上地铁都是被后面的人推上去的(囧)， 但是并不像人们所说的雾霾那么严重。北京这座城市有她美的一面，京都的蓝天和夜景也很美。这是我窗外风景:
生活追求些什么 之前在杭州不经意间关注的一个和我们年纪相仿的女作家: 七毛，她的公众号也是这个名。昨天推送了一篇文章，写了一些看法(我们这个年纪可能会遇到的问题，仅供参考)。 我感觉这将是未来我们大多数人的一种活法，就像目前的日本，先实现个人精致利己的生活，然后实现财富自由，做一个有情怀、有趣的人，达则兼济天下。
就像七毛所说的「爸妈催我催得紧，我也懒得理他们。我又不为别人活，我没必要跟所有人一样，非要在二十五岁结婚，二十八岁当妈，三十岁开始操劳家庭，五十岁还完房贷，六十岁退休。所有人的一生几乎都是一样的，真特么无聊。」
我想: 在还没遇到你想要的另一半的时候，也不要着急，有时间烦恼，不如先把个人的生活过的精致一点:)。 毕竟生活是你自己的，爱情只是生活的一部分，很多时候需要为生活而奔波，找些能够让你着迷的爱好沉迷。
或是不逾矩，按部就班的三十而立，买房，生小孩； 或是趁着青春的尾巴，还可以从心所欲，就看自己能扛多久哈。不要去追求别人认为你需要的东西。
感觉最近自己浮躁了不少，不知道是不是“沉迷”在股市中，但是每种经历都不可多得，多体会不同的生活。希望不忘初心，慢慢读完一本书。看看身边的朋友，大家都在努力活着，上班，赶地铁，外卖，下班&amp;hellip;</description>
    </item>
    
    <item>
      <title>优美的句子</title>
      <link>https://forrestsu.github.io/posts/diary/%E4%BC%98%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%AD%90/</link>
      <pubDate>Sun, 20 Aug 2017 18:31:18 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/diary/%E4%BC%98%E7%BE%8E%E7%9A%84%E5%8F%A5%E5%AD%90/</guid>
      <description>&amp;lt;待补充&amp;gt; &amp;hellip;
1 我相信，真相并不可怕，可怕的是误解和谎言。
2 有的人是你生命中的一扇窗户，透过他们可以看见另外一个世界。与他们的交往机会，你永远都不要错过。
3 在我很小的时候，我的父亲就给过我一句忠告，这句忠告至今对我影响深远，他对我说：“每当你觉得想要批评什么人的时候，你要记住，并不是所有人都有你所拥有的的优势。”&amp;mdash;-《了不起的盖茨比》
4 就算活在脱发和困于脱贫的年纪，还是要心存希望啊！
5 今天，是我余生最年轻的一天！永远年轻，永远热泪盈眶！
6 尼采说，一切美好的事物都是曲折地接近自己的目标，一切笔直都是骗人的，所有真理都是弯曲的，时间本身就是一个圆圈。</description>
    </item>
    
    <item>
      <title>工作会议</title>
      <link>https://forrestsu.github.io/posts/work/%E5%B7%A5%E4%BD%9C%E4%BC%9A%E8%AE%AE/</link>
      <pubDate>Fri, 04 Aug 2017 01:02:34 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E5%B7%A5%E4%BD%9C%E4%BC%9A%E8%AE%AE/</guid>
      <description>1 PLAN 下半年主要是推系统，券商全面终身免费铺开~~ **工作重心：**
 (1) 系统性能测试 (2) 商品期货 (+期货高频) (3) 深度学习 (Deep Learn &amp;amp;&amp;amp; Recommend )
 2 期货高频模块 (1) 策略执行的优先级 策略的执行顺序的先后顺序，对执行结果的影响。 (2) 限制完成的Job CTP 会不断重试. (3) 金额＞10000的都需要用逗号分隔
3 业务了解 (营利模式） 公募基金：收管理费 对冲基金：2倍的管理费 + 20~40%的收益分成</description>
    </item>
    
    <item>
      <title>当下的时光</title>
      <link>https://forrestsu.github.io/posts/diary/%E5%BD%93%E4%B8%8B%E7%9A%84%E6%97%B6%E5%85%89/</link>
      <pubDate>Wed, 02 Aug 2017 22:07:43 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/diary/%E5%BD%93%E4%B8%8B%E7%9A%84%E6%97%B6%E5%85%89/</guid>
      <description>今天，忽然一丝危机感从脑海中闪过。自从换了工作，好久都不曾有过，领导还是我喜欢的领导，工作也是擅长和喜欢的工作。只是感觉现在很安逸，是不是在走下坡路！ 午间小憩，我问导师：「我们近半年的开发方向是什么？」导师说：「我也很迷茫啊！」 导师的想法是更好的服务客户，接需求改bug。Boss 想做标准化的产品，个性化的需求宁可不要，眼下只需要做好核心模块。 我个人感觉Boss的想法更有前瞻性一点，毕竟诺基亚死在了忙不完的需求路上。那么我自己的3~5年规划是什么呢？ en&amp;hellip; 好像也很迷茫，只是边走边看。 不知道是不是进入了“青年危机”，感觉时光匆匆，计划要做的事太多，一个人的力量太渺小。我们害怕浪费时间，害怕自己一事无成。害怕找不到心仪的女生，害怕自己没有能力给喜欢的人未来。所以我并不都是真正的快乐。大部分时间都在强颜欢笑。我们带着“我与众不同”的使命而来，却慢慢的就活成了芸芸众生中的某一个。&amp;lt;鸡汤就写到这里 :) &amp;gt;
我的时光 我的烟火 还有我那黛青色的山坡。 一无所有 也无所谓失去 你尽管努力 追求你心中所想 剩下的就交给时光。 &amp;lt;完&amp;gt;</description>
    </item>
    
    <item>
      <title>张北音乐节2017</title>
      <link>https://forrestsu.github.io/posts/life/%E5%BC%A0%E5%8C%97%E9%9F%B3%E4%B9%90%E8%8A%822017/</link>
      <pubDate>Sun, 30 Jul 2017 10:59:50 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%BC%A0%E5%8C%97%E9%9F%B3%E4%B9%90%E8%8A%822017/</guid>
      <description>题图：京都夜景-摄于北花园 上周六(2017-07-29) 去参加了一年一度的草原音乐节。
还傻大呵的把别人的车给擦了，还好。
1 租车时确认是否交付行车证和车钥匙。</description>
    </item>
    
    <item>
      <title>关于编程</title>
      <link>https://forrestsu.github.io/posts/life/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 26 Jul 2017 01:15:14 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A8%8B/</guid>
      <description>Write out good taste code 　学习编程一般有两种路子，有的人先从算法入门，写出简单优美的代码；有的人从项目开发入门，按需求学习掌握对应的算法。当然条条大路罗马，没有好与坏，只要能抓到老鼠的猫都是好猫。
　算法就像是金庸小说里的内功，而具体的项目开发就像武侠秘诀里面的一招一式，如果辅以内功修炼能事半功倍。若是要达到扫地僧那等境界，就得忘记武功秘籍里的所有招式，无招胜有招。（这就是灵活运用，不拘泥于招式，随心而动)。 好了，扯了这么多虚的东西，能说点有用的吗？
　王垠，最近写了篇文章**「如何掌握所有编程语言」**，看似口气大，但细看内容，确实很有道理。 学习编程语言我们只要关注 编程语言的特性，（大多数编程语言特性大多雷同），只要掌握了一门语言某个特性底层的实现机理， 换到另一门不熟悉的语言上，该特性十有八九是相同的，这就是所谓的触类旁通，迁移学习能力。 这样的话，只要精通一门语言，只要你愿意，再花点时间，就能很快掌握所有编程语言，突然有种打通任督二脉的感觉。</description>
    </item>
    
    <item>
      <title>学了算法有什么用？</title>
      <link>https://forrestsu.github.io/posts/life/%E5%AD%A6%E4%BA%86%E7%AE%97%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/</link>
      <pubDate>Wed, 26 Jul 2017 01:00:25 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%AD%A6%E4%BA%86%E7%AE%97%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/</guid>
      <description>前言 　大学4年，基本上一直都在学习算法，大四的时候写过Android APP(校园助手)! 那算法到底有什么用呢? 面试官又经常会问，那么工作中又能用多少？下面我主要根据自己的经历和感受来说下自己的观点，抛砖引玉，不足之处还望各位看官指出 :) 。
如果你也懂算法 　如果你也懂算法，用起API来就是看山不是山，写完整个程序就知道 程序的瓶颈在哪，该如何想办法去优化。 如果你也懂算法，当各大电商推出满几百减多少的活动时，你可以用背包来挑选物品，获得最大价值的商品组合。 如果你也懂算法，当房间里的东西摆放得凌乱不堪时，你可以用 Huffman Coding 的思路来摆放你的物品。 如果你也懂算法，你可以从Hall&amp;rsquo;s marriage theorem 中理解现实中的婚姻模型，去追求一段稳定的婚姻。
总结 　用 0 和 1，你可以创建一个属于你的世界；在 GPU 里，你可以策马扬鞭，指挥千军万马，到达你所向往的远方。</description>
    </item>
    
    <item>
      <title>如何掌握所有语言</title>
      <link>https://forrestsu.github.io/posts/life/%E5%A6%82%E4%BD%95%E6%8E%8C%E6%8F%A1%E6%89%80%E6%9C%89%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Sun, 23 Jul 2017 12:35:33 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%A6%82%E4%BD%95%E6%8E%8C%E6%8F%A1%E6%89%80%E6%9C%89%E8%AF%AD%E8%A8%80/</guid>
      <description>2017-07-23 从催添翼那十几页纸的paper中学到了很多，这在我第一份工作面试过程中，几乎起了至关重要的作用。
垠神最近的一篇博客，掌握所有程序语言，就像金庸笔下的武功高手，最后需要忘记</description>
    </item>
    
    <item>
      <title>c和c&#43;&#43;混用技巧</title>
      <link>https://forrestsu.github.io/posts/cpp/c%E5%92%8Cc&#43;&#43;%E6%B7%B7%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 17 Jul 2017 16:12:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c%E5%92%8Cc&#43;&#43;%E6%B7%B7%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>1 用C-style 来访问vector
1 2 3 4 5 6 7 8  vector&amp;lt;char*&amp;gt; str; str.push_back(&amp;#34;abc&amp;#34;); str.push_back(&amp;#34;123&amp;#34;); //按照 C-style 来访问vector  char** ptr= str.data(); for(int i =0;i&amp;lt;2;++i) printf(&amp;#34;%s\n&amp;#34;,ptr[i]);   2</description>
    </item>
    
    <item>
      <title>关于博弈论</title>
      <link>https://forrestsu.github.io/posts/algorithm/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/</link>
      <pubDate>Sun, 16 Jul 2017 17:14:54 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/algorithm/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%BC%88%E8%AE%BA/</guid>
      <description>大学的时候，我主要钻研的方向就有博弈论。博弈论挺有意思的，而且生活中处处有博弈， 趣味性的小游戏更是如此，比如斗地主，围棋，三国杀，狼人杀。当然如果在和几个朋友一起玩，你可能还需要人物的心理，语气分析来 enhance 你的判断。
博弈论有几个比较经典的表征，一个是对抗性，还有一个是态势(必胜态，必败态) 。态势是可以转移的，一般可以用「状态转移方程」来描述。在学习博弈论的过程中，可采用周伯通的左右互博的方式来思考！
程序员面试过程中，面试官也会通过一些博弈题来考察一个程序员的思维应变能力，入门级的就是分石子游戏，经典的有BAT 有海盗分金币问题。
本文主要来分析下狼人杀中的博弈，从而更好的玩这个游戏(不涉及心理方面的分析)。狼人杀 游戏和拜占庭将军问题有点类似。
待续</description>
    </item>
    
    <item>
      <title>2017春节回家随感</title>
      <link>https://forrestsu.github.io/posts/diary/2017%E6%98%A5%E8%8A%82%E5%9B%9E%E5%AE%B6%E9%9A%8F%E6%84%9F/</link>
      <pubDate>Sun, 16 Jul 2017 17:10:24 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/diary/2017%E6%98%A5%E8%8A%82%E5%9B%9E%E5%AE%B6%E9%9A%8F%E6%84%9F/</guid>
      <description>2017年今年正好是本命年，我24岁， 1月31日，和两个高一（龚李平，康康）室友小聚，在澧县一中逛了逛，回忆往昔，峥嵘岁月，然后在郭老五吃了个饭。
感觉回家有种莫名的失落感，对未来的不可把控的无助，感觉自己还得奋斗几年，今年换一个更喜欢的工作。
明天在家写写代码！3～4月开始投简历。 2月1日在家，2月2日在家，2月3日办完护照去长沙。
记于2017-01-31晚22：38</description>
    </item>
    
    <item>
      <title>大公司还是小公司？</title>
      <link>https://forrestsu.github.io/posts/work/%E5%A4%A7%E5%85%AC%E5%8F%B8%E8%BF%98%E6%98%AF%E5%B0%8F%E5%85%AC%E5%8F%B8/</link>
      <pubDate>Tue, 27 Jun 2017 00:11:30 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E5%A4%A7%E5%85%AC%E5%8F%B8%E8%BF%98%E6%98%AF%E5%B0%8F%E5%85%AC%E5%8F%B8/</guid>
      <description>大公司就像温水煮青蛙，慢慢的你就不知不觉变成一颗螺丝钉，这也是一般的领导所期望的。
1 公司的组织结构 以下是个人的愚见，如有高见，不吝留言评论^_* 大公司的特点：就像一个螺丝钉，要求就是:尽管做好自己那块。 优点：工作更规范，更加标准化，流程化，了解的业务更全面，平台更大。 缺点：可能对自己的能力提升很慢，如果不在业余时间自己充实提升自己，就像温水煮青蛙，螺丝钉越钉越牢固。
小公司的特点：要做的工作更杂，更有挑战性和创新性。 优点：能够学到更多前沿的东西(前提是你肯钻研)，然后还能应用到工作中，每个人承担的东西更多，使用的技术比较新，勇于尝试和创新。 缺点：平台较小，闲下来的时间比较少。</description>
    </item>
    
    <item>
      <title>谈创业公司的例会</title>
      <link>https://forrestsu.github.io/posts/work/%E8%B0%88%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E7%9A%84%E4%BE%8B%E4%BC%9A/</link>
      <pubDate>Mon, 26 Jun 2017 23:50:35 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E8%B0%88%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8%E7%9A%84%E4%BE%8B%E4%BC%9A/</guid>
      <description>2017-07-28
Preface  今天是我参加公司的第二次全体会议，每次 Boss 都会讲很多东西，虽然有很多不理解，但是潜意识里面还是非常认同，很多观点能产生共鸣。 我是 2017年 4 月 10 日入职一个40人左右的小型创业公司，到今天(20170608)差不多快2个月，创业公司能迫使你成长的更加快 :)。 有时候，很多事需要你自己去 handle ！
1 Business Driven 　公司都是由业务驱动的，而且是那些赚钱的业务决定了这个公司成长有多快，走多远。 技术往往是第一生产力，我们要能够 Perceive (感知)新技术，看是否能够对当下的业务有提升。
 (1) 不要为追求新技术而用新技术，要以业务需求为主导来采用新技术。 (2) 新技术层出不穷，还没等我们掌握，又有新的技术出现了，感觉handle不过来。 (3) 工作中有时间要去了解新技术，新思路，新方法，要敢于尝试，去做一些事。 (4) 业余时间参加 技术沙龙、开发者大会 也是极好的。</description>
    </item>
    
    <item>
      <title>在Markdown中输入数学公式(MathJax)</title>
      <link>https://forrestsu.github.io/posts/tools/%E5%9C%A8markdown%E4%B8%AD%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8Fmathjax/</link>
      <pubDate>Sun, 25 Jun 2017 19:46:26 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/%E5%9C%A8markdown%E4%B8%AD%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8Fmathjax/</guid>
      <description>1 基本语法 1.1 呈现位置  正文(inline)中的LaTeX公式用$...$定义 语句为$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$ 显示在当前行内(简书目前不支持mathjax 只好暂时用图片代替了→_→)   单独显示(display)的LaTeX公式用$$...$$定义，此时公式居中并放大显示 语句为$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$ 显示为  下列描述语句中若非特别指出均省略$...$  2 希腊字母    显示 命令 显示 命令     α \alpha β \beta   γ \gamma δ \delta   ε \epsilon ζ \zeta   η \eta θ \theta   ι \iota κ \kappa   λ \lambda μ \mu   ν \nu ξ \xi   π \pi ρ \rho   σ \sigma τ \tau   υ \upsilon φ \phi   χ \chi ψ \psi   ω \omega        若需要大写希腊字母，将命令首字母大写即可。 \Gamma呈现为   若需要斜体希腊字母，将命令前加上var前缀即可。   3 字母修饰 3.</description>
    </item>
    
    <item>
      <title>阁中小聚(ljd)</title>
      <link>https://forrestsu.github.io/posts/life/%E9%98%81%E4%B8%AD%E5%B0%8F%E8%81%9Aljd/</link>
      <pubDate>Sun, 25 Jun 2017 18:31:10 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E9%98%81%E4%B8%AD%E5%B0%8F%E8%81%9Aljd/</guid>
      <description>今天2017-02-04，来长沙和 ljd 小聚，吃个饭感觉自己已经在舒适区呆得太久！ （数据挖掘，人工智能，物联网，云计算，VR/AR）
感觉自己不足的地方： 1 保持对新事物和未知领域的好奇。 2 感觉最近一年，已经被生活和工作方式固化，安逸的温水煮青蛙。 3 缺少追根溯源的精神，知其然不知其所以然！ 4 拿的起，放得下！
 工作过程中： 在这条流水线上，领导总是想雇佣更低廉的劳动力，如果你在这个岗位上只是纯粹的在既定的框架下实现功能，可能没有相应的升值空间。 更积极一点： 你可以思考这条流水线哪些环节是可以优化的，提高生产效率，节省成本。 可能某些环节可以优化，但是管理层基于产品稳定性的考虑，还是使用原来的流程。（毕竟前人先弄出来了这个框架流程，当然如果没有对应的流程，你可以搞一个。） 前期你可能会写一些提高生产力的工具，还辅助开发。 但是领导层会有基于产品的发展方向来考虑（更好的大局观）。 中期你可能会开始做框架设计，来考虑一个业务需求采用什么样的架构来实现（前端、中间件、后台）。这时候你可能就变成一个小的leader，带着几号人编码。</description>
    </item>
    
    <item>
      <title>搭建CUDA 环境（GPU）</title>
      <link>https://forrestsu.github.io/posts/cs/%E6%90%AD%E5%BB%BAcuda-%E7%8E%AF%E5%A2%83gpu/</link>
      <pubDate>Mon, 12 Jun 2017 10:24:33 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cs/%E6%90%AD%E5%BB%BAcuda-%E7%8E%AF%E5%A2%83gpu/</guid>
      <description>1 Preface  最近拿到一篇论文，老板需要按照论文的思路，通过提取股票行情的特征，从而预测未来几分钟内股票的价格变动。在这之前已经用python 的 scikit 库实现过了。计算完全市场3000只股票大概需要1小时(10 thread)。Boss想能不能1min能就算完全市场的？所以 CTO 就建议使用GPU来加速计算。 下面我们就来讲讲怎么搭建GPU的环境。(如有不正确的地方，请不吝指正)
1.1 首先确认配置的 Nvidia 显卡型号 官网查看CUDA兼容的GPU型号cuda-gpu (20170612)  CUDA Toolkit on x86_32 is unsupported
 2 CUDA 环境搭建 2.1 Download nvidia cuda-toolkit 下载对应的开发包，安装的时候选择自定义安装，然后下一步、下一步即可。 2.</description>
    </item>
    
    <item>
      <title>工作重心梳理</title>
      <link>https://forrestsu.github.io/posts/work/%E5%B7%A5%E4%BD%9C%E9%87%8D%E5%BF%83%E6%A2%B3%E7%90%86/</link>
      <pubDate>Fri, 09 Jun 2017 22:53:22 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E5%B7%A5%E4%BD%9C%E9%87%8D%E5%BF%83%E6%A2%B3%E7%90%86/</guid>
      <description>1 目前的工作模块划分data-20170609 Team1 : z(Teamleader) (10人左右)
   Module front-developers backend developers     1 T0Service huoyanfeng、liuchengbo sunquan   2 Risk liuwei、zhangyue liuwei、zhangyue   3 Account Management guoyuzhen guoyuzhen   4 Quotes konghairong lizhijian   期货高频 yantao yantao   衍生数据计算 - lizhijian   测试：1人　HR&amp;amp;财务：1人     Team2 : App(Andriod &amp;amp;&amp;amp; IOS) Team (4~5 人)     Team3 : Trading Team (5人左右)     Team4 : 金工数据 Team (4人左右)      2 2017下半年的工作重心 近期已经完成的 Task List： 1 ZMQ 消息1帧改为2帧，第1帧 改为主题，第2帧传递数据。（需要考虑smooth migration） 2 银河策略宝： 客户端cache 优化，需要考虑去除中间件。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 std::function 和 std::bind</title>
      <link>https://forrestsu.github.io/posts/cpp/c&#43;&#43;11-std_function%E5%92%8Cstd_bind/</link>
      <pubDate>Fri, 09 Jun 2017 16:50:08 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c&#43;&#43;11-std_function%E5%92%8Cstd_bind/</guid>
      <description>1 std::bind std::bind 可以用来绑定一个函数 std::placeholders; 定义有_1、_2、_3 &amp;hellip;
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include &amp;lt;functional&amp;gt;using namespace std; using namespace std::placeholders; int f(int, char, double); int main() { // 翻转参数顺序  auto frev = bind(f, _3, _2, _1); int x = frev(1.</description>
    </item>
    
    <item>
      <title>关于亲情</title>
      <link>https://forrestsu.github.io/posts/life/%E5%85%B3%E4%BA%8E%E4%BA%B2%E6%83%85/</link>
      <pubDate>Fri, 09 Jun 2017 07:23:53 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E5%85%B3%E4%BA%8E%E4%BA%B2%E6%83%85/</guid>
      <description> 　趁亲人还在身边，趁你和他(她)们在一起的时候，多聊聊天，多出去看看世界，多吃点他(她)们没有吃过的东西；这样万一某天他(她)们突然离去时，希望你不会哭。或者我离开时，也不会留下太多遗憾，毕竟生命很渺小有很脆弱。
  　而伤病面前，任何关心得言语和举动都会直达心肺，形成暖流。 在这种事情面前，我觉得可以试试和他们多坐下来聊天，聊平常事带给他们正能量，而且有几个举措会暖人心，第一是握手而谈，第二是拍肩抚背。只能从小事关心，让他们感到温暖。
 </description>
    </item>
    
    <item>
      <title>「Silicon Valley 4 」观后感</title>
      <link>https://forrestsu.github.io/posts/readingnotes/silicon-valley-4-%E8%A7%82%E5%90%8E%E6%84%9F/</link>
      <pubDate>Tue, 06 Jun 2017 01:10:38 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/silicon-valley-4-%E8%A7%82%E5%90%8E%E6%84%9F/</guid>
      <description>看了硅谷4 前5集，男主角属于那种典型的技术男，不想在视屏聊天软件上继续发展，想基于自己创造的压缩算法来构建一个互联网络。印度人搞出来的视频聊天App由于小于12岁的用户太多，此时正好huli的CEO，Gavin有收购的想法，正好阴差阳错把产品转给了Gavin，进而导致Gavin被赶下台。 此时男主角 发现自己想要构建的Piper网络却被Gavin注册了专利，他晚上直接去找Gavin，遭遇闭门羹，峰回路转Gavin却提出要和男主角合作。后来却因为哺血仔的欺骗，对人生心灰意冷把专利无偿转给了Richard，然后坐飞机去寻找自我&amp;hellip; Feeling 　Gavin走了居然还有种舍不得，就像甘地丢下另一只鞋子那样，有时候我们得不到的东西，如果能成全别人，那也是一种美事！
待续&amp;hellip;..</description>
    </item>
    
    <item>
      <title>《偷影子的人》读后感</title>
      <link>https://forrestsu.github.io/posts/readingnotes/%E5%81%B7%E5%BD%B1%E5%AD%90%E7%9A%84%E4%BA%BA%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Tue, 06 Jun 2017 00:42:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/%E5%81%B7%E5%BD%B1%E5%AD%90%E7%9A%84%E4%BA%BA%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>preface 　《偷影子的人》作者marc·levy，这本书是在2015-09-17日京东搞活动买的，差不多16年3月份才开始看，每天晚上看一点，断断续续差不读2周看完。整本书240页左右。
brief synopsis of story 　一个老是受班上同学欺负的瘦弱小男孩，因为拥有一种特殊能力而强大：他能「偷别人的影子」，因而能看见他人心事，听见人们心中不愿意说出口的秘密。他开始成为需要帮助者的心灵伙伴，为每个偷来的影子点亮生命的小小光芒。 某年灿烂的夏天，他在海边邂逅一位又聋又哑的女孩克雷尔。他该如何用自己的能力帮助她？他将如何信守与她共许的承诺？ 一个会用风筝写出「我想你」的女孩啊，让人永远都忘不了。 随着大学毕业，男孩按部就班医院实习，然后慢慢成长为一名优秀的医生，实习期间，和同为实习生的苏菲产生了爱情，但是没过多久，其间他帮助他的好友吕克实现了成为一名医生的梦想。一次偶然的机会，吕克考前要去海边散心，要男孩一同前往，这让男孩想起了儿时就喜欢的克雷尔，回来之后苏菲就和男孩回到了之前的朋友关系。 吕克也发现自己并不喜欢当医生，后来吕克就开始追求苏菲，男孩的母亲因为身患重病，在约好要来男孩的城市那天离开了人世，而他母亲早已安排好自己的后事。男孩回到家参加了母亲的葬礼，辗转通过海边的老人修好了克雷尔的风筝，又问到了克雷尔现在在学校当一名老师，男孩通过伊凡找到了克雷尔，最后男孩在克雷尔楼下放飞了儿时的风筝，就像童话故事里那样在一起了。故事完
self-feeling 　这本小说的男主人公是没有名字的，就连他居住的城市也是没有名字的。虽然跨越国界与种族，但是也能从中找到一部分自己童年的影子，那些造就了我们的性格，影响我们未来的瞬间。 故事中的“我”是一个衷于自己最初的想法，从一而终，一开始似乎就知道自己内心真正想要的是什么的人，衷于自己的初恋，衷于自己医学事业。 而他的好友吕克却截然相反： (1) 一开始讨厌做面包，追求自己的内心的想法想成为一名医生，当有机会终于快要成为一名医生，发现教科书，考试并不是自己想要的生活，还不如好吃的面包更让人满足，还是毅然回去成为一名面包师。 (2) 吕克在医学课自习时，喜欢上了安娜贝拉，后来发现她并不是自己喜欢的女生(问题是双方的)，后面在“我”和苏菲分手后，吕克追求苏菲成为情侣。
　吕克更看重亲情，想要陪妹妹一起度过圣诞夜，选择回到自己的父母身边。 而”我“却更看重自己的事业(工作)和自己想要的爱情，随着年龄的增长，“我”的母亲在一个普通的早晨悄然离开人世，以至于都没能见上最后一面，正如「子欲养而亲不待」。这似乎是我们在外漂泊打拼的年轻人时常会担心的一件事，那么遥远又那么近。所以我会把握一些眼下稍纵即逝的机会，尽量回报父母，不要指望将来有的是时间这种自我麻痹的托词。
summary 　男孩自小是单亲家庭，性格内向，考虑自己的感受，追求自己想要的事业和爱情，更加独立。吕克则更注重自己的家人、亲情。 当然这是两种截然不同的人生，没有对与错。多种多样的选择演绎着不一样的人生，构成了我们这个纷繁多彩的世界。
欢迎评论，指出其中的不足。 读书·百味人生 孙权 记于北京2017-06-05晚8:12 北花园</description>
    </item>
    
    <item>
      <title>win下ssh指定密码登陆</title>
      <link>https://forrestsu.github.io/posts/tools/win%E4%B8%8Bssh%E6%8C%87%E5%AE%9A%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</link>
      <pubDate>Mon, 29 May 2017 21:02:22 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/win%E4%B8%8Bssh%E6%8C%87%E5%AE%9A%E5%AF%86%E7%A0%81%E7%99%BB%E9%99%86/</guid>
      <description>1 Preface 因为ssh基于安全考虑，不支持参数指定密码(.bash_history可查看输入过的命令)。  2 PROBLEM 因为需要经常远程登录到vmware中Linux 服务器，每次都得输入一遍密码，比较麻烦！所以，想找找有没有什么方法，可以在调用ssh的时候就指定好密码，每次输入alias就好了。
3 Current Solutions 在网上搜一下，大致有3种方式。 方案一：通过ssh-keygen生成RSA，然后采用公钥登陆的。 方案二 (仅适用于*unix系统) ：用Python的expect来发送密码验证，验证通过后，把控制权返还给终端。 Linux下一般使用sshpass(C language) ，还有 python 实现的 sshpass 方案三：采用putty.exe
4 Problem Analysis 1、最好弄成rsa公钥验证方式，达到ssh无密码登录。 2、ssh的密码输入是绑定到 TTY 而不是stdin 的，所以无法重定向（到管道） 2.</description>
    </item>
    
    <item>
      <title>Redis 入门</title>
      <link>https://forrestsu.github.io/posts/library/redis-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 16 May 2017 15:19:29 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/library/redis-%E5%85%A5%E9%97%A8/</guid>
      <description>1 登陆 redis-cli 远程访问：
 $ redis-cli -h host -p port -a password
 2 常用命令 redis 127.0.0.1:6379&amp;gt; COMMAND KEY_NAME (1) 查找key的类型  type key
查找 keys *oob* 列出所有包含oob的key
 hash 集合   HMSET sqkey name &amp;ldquo;redis tutorial&amp;rdquo; description &amp;ldquo;redis basic commands for caching&amp;rdquo; likes 20 visitors 23000</description>
    </item>
    
    <item>
      <title>Thinking micro-service Architecture</title>
      <link>https://forrestsu.github.io/posts/architecture-thinking/thinking-micro-service-architecture/</link>
      <pubDate>Mon, 15 May 2017 14:41:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/architecture-thinking/thinking-micro-service-architecture/</guid>
      <description>前言 　目前微服务架构，基本都是通过消息系统来进行Node与Node之间的通信，开完成数据交互的。 目前常用的解决方案: 消息MQ: ZeroMQ、RabbitMQ 数据协议： protobuf、json 数据持久化： Redis、MongoDB 框架： Libuv
Analysis Advantage Analysis： zeroMQ</description>
    </item>
    
    <item>
      <title>ubuntu 16.10安装eclipse 4.6</title>
      <link>https://forrestsu.github.io/posts/linux/ubuntu-16-10%E5%AE%89%E8%A3%85eclipse-4-6/</link>
      <pubDate>Sat, 13 May 2017 15:22:38 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/linux/ubuntu-16-10%E5%AE%89%E8%A3%85eclipse-4-6/</guid>
      <description>1.下载jdk , jdk-8u131-linux-x64.tar.gz 2 建立 sudo mkdir /usr/lib/java
3 添加环境变量sudo vi /etc/profile
 export JAVA_HOME=/usr/lib/java/jdk1.8.0_131 export JRE_HOME=${JAVA_HOME}/jre export CLASS_PATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH
 4
 [Desktop Entry] Encoding=UTF-8 Name=Eclipse Comment=Eclipse Exec=/home/sunquan/App/eclipse/eclipse Icon=/home/sunquan/App/eclipse/icon.</description>
    </item>
    
    <item>
      <title>ubuntu 16.10安装teamviewer12</title>
      <link>https://forrestsu.github.io/posts/linux/ubuntu-16-10%E5%AE%89%E8%A3%85teamviewer12/</link>
      <pubDate>Fri, 12 May 2017 23:52:34 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/linux/ubuntu-16-10%E5%AE%89%E8%A3%85teamviewer12/</guid>
      <description>1 首先在官网上下载适用于ubuntu的 teamviewer12.deb  sudo dpkg -i teamviewer_i386.deb sudo apt-get install -f
 2 在终端输入teamviewer，即可在终端启动该程序 In case you get the error “wrong architecture i386” you have to execute the following commands:</description>
    </item>
    
    <item>
      <title>talk with Yuanyuan</title>
      <link>https://forrestsu.github.io/posts/life/talk-with-yuanyuan/</link>
      <pubDate>Tue, 09 May 2017 20:28:51 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/talk-with-yuanyuan/</guid>
      <description>1 来北京怎么样？ 还习惯吗?
2 老家哪的？
3 和杭州相比怎么样？
4 工作还习惯吗？
5 还说家乡话？</description>
    </item>
    
    <item>
      <title>Eclipse 4.6 support c&#43;&#43;11</title>
      <link>https://forrestsu.github.io/posts/tools/eclipse-4-6-support-c&#43;&#43;11/</link>
      <pubDate>Thu, 27 Apr 2017 10:14:35 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/eclipse-4-6-support-c&#43;&#43;11/</guid>
      <description>1 配置MinGW-w64环境 　使用MinGW时(其中g++ version 4.9.2 )，发现std::to_string()函数无法使用，还是推荐使用snprintf()。 如果在Windows下搭建MinGW环境，推荐使用MinGw-w64，std::to_string()等函数都能正常使用（其中g++ version 6.3.0），所以后续推荐使用64位版本的MingW，可在nuwen下载MinGW-w64,即mingw-14.1-without-git.exe。 然后双击exe，即可解压到D:\Portable\，配置系统环境变量MINGW_HOME。 最后在Path后追加 ;%MINGW_HOME%\bin,完成配置。
2 支持C++ 11 There&amp;rsquo;s two things you have to do, first you need to setup your compiler, then you need to setup CDT&amp;rsquo;s language processor.</description>
    </item>
    
    <item>
      <title>libuv入门</title>
      <link>https://forrestsu.github.io/posts/library/libuv%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 19 Apr 2017 14:05:47 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/library/libuv%E5%85%A5%E9%97%A8/</guid>
      <description>libuv 定时器timer 使用： g++ -o sunquan main.cpp -luv 执行 ./sunquan 可以看到每隔1秒打印一次 count的值。
uv_timer_start(&amp;amp;timer, timer_cb, timeout, repeat); 其中timeout是首次触发等待的时间毫秒值，之后每隔repeat毫秒触发一次，如果repeat=0表示首次触发之后不再触发。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  //main.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 explicit关键字</title>
      <link>https://forrestsu.github.io/posts/cpp/c&#43;&#43;-explicit/</link>
      <pubDate>Fri, 07 Apr 2017 23:42:42 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c&#43;&#43;-explicit/</guid>
      <description>C++中的explicit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class Test1 { public: Test1(int n) { num=n; }//普通构造函数 private: int num; }; class Test2 { public: explicit Test2(int n) { num=n; }//explicit(显式)构造函数 private: int num; }; int main() { Test1 t1=12; //隐式调用其构造函数,成功  Test2 t2=12; //编译错误,不能隐式调用其构造函数  Test2 t2(12); //显式调用成功  return 0; }   </description>
    </item>
    
    <item>
      <title>深入理解C&#43;&#43;11智能指针</title>
      <link>https://forrestsu.github.io/posts/cpp/deep-in-smart-pointer-cpp/</link>
      <pubDate>Fri, 07 Apr 2017 20:54:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/deep-in-smart-pointer-cpp/</guid>
      <description>1 Preface 软件工程遇到的问题都可以通过增加一个中间层来解决, 智能指针也是基于这样的思想；
C++ 11 包含了以下 3 种常用的智能指针：
 std::unique_ptr std::shared_ptr std::weak_ptr  包含头文件 #include &amp;lt;memory&amp;gt; 即可
2 原理分析 2.1 shared_ptr 直接用 shared_ptr 管理一个堆上的裸指针对象：
1  std::shared_ptr&amp;lt;Good&amp;gt; gp1(new Good());   2.</description>
    </item>
    
    <item>
      <title>恒生一年半工作体验</title>
      <link>https://forrestsu.github.io/posts/work/%E6%81%92%E7%94%9F%E4%B8%80%E5%B9%B4%E5%8D%8A%E5%B7%A5%E4%BD%9C%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Fri, 07 Apr 2017 17:51:39 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E6%81%92%E7%94%9F%E4%B8%80%E5%B9%B4%E5%8D%8A%E5%B7%A5%E4%BD%9C%E4%BD%93%E9%AA%8C/</guid>
      <description>前言  我是2015年6月毕业就来到恒生电子工作，算上3个月实习期，到今天(2017-02-21)将近有2年光景。 先简单介绍下我这边的工作情况：我工作的部门是恒生起步比较早的部门—资产管理事业部（隶属于资产管理事业部&amp;lt;下面有研发一二三四、投资一部、投资二部共6个子部门&amp;gt;）。 每个部门都有一个到多个产品，一个产品即一个BU。比如我所在的投资二部目前有4个小BU（资管SQL版本，非标1.0，非标2.0，QDII境外投资）资管SQL是逐渐被O32的替换的产品，QDII也是拿了O32一个版本来独立开发的。 我所在的团队，主要包含以下小组: 风控、日终、交易、报盘、查询、周边。 我这边主要负责：报盘+部分交易+部分周边。 周边主要包括 UFX/EI统一接入（C++编写）。
1 工作方面  最近一年来，是经常加班，任务稍微有点多，总体感觉还好。基本都是需求搞好业务分析，形成业务文档，然后Jun哥搞好前期的业务设计。 整体评估，然后把具体的修改点(增加的模块)都列出来。最后分工到个人。(详细的业务流程就不讲了)
2 技术  技术基本都是沿用O32老的三层架构。 前端
采用Delphi实现界面要素(委托、查询、参数调整等界面。) 中间件
采用研发中心的Fbase中间件：以插件的形式开发，插件下挂载对应的业务组件(典型的如proc插件) 中间件主要含有3个主要插件：T2，F2插件(类似于tcp和udp,具体的底层我不太了解) 负责消息按功能号发送，后端调用服务负载均衡。Log插件主要用于异步记录日志。 后端
主要使用：C/C++ proc*c 来访问 Oracle。还采用共享内存 和信号量实现了一个内存表(主要用来加载热表数据)。</description>
    </item>
    
    <item>
      <title>zeromq 入门</title>
      <link>https://forrestsu.github.io/posts/library/zeromq-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sun, 02 Apr 2017 20:24:37 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/library/zeromq-%E5%85%A5%E9%97%A8/</guid>
      <description>1 Install ubuntu 16.10上安装zeroMQ： (1) 下载zeromq wget https://github.com/zeromq/libzmq/releases/download/v4.2.1/zeromq-4.2.1.tar.gz
(2) 解压
 tar -zxvf zeromq-4.2.1.tar.gz
 (3) 编译安装
 执行configure文件：./configure 编译： make 安装： make install
 2 编写样例代码 server端代码：server.cpp
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>我的大学导师 (贺老师)</title>
      <link>https://forrestsu.github.io/posts/life/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E5%AF%BC%E5%B8%88-%E8%B4%BA%E8%80%81%E5%B8%88/</link>
      <pubDate>Sat, 01 Apr 2017 09:11:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E6%88%91%E7%9A%84%E5%A4%A7%E5%AD%A6%E5%AF%BC%E5%B8%88-%E8%B4%BA%E8%80%81%E5%B8%88/</guid>
      <description>我大学 学的「计算机科学与技术专业」，是在大一的时候，想听听其他老师上的专业课(C language），然后就去旁听了贺老师的课，这一去就一发不可收拾， Oh my God! 怎么会有这么有趣的老师，然后就经常翘掉英语课，高数课&amp;hellip; 在大一下学期的时候，贺老师带领的 ACM 实验室招新，举办了一次程序设计竞赛，按年级排名，然后侥幸进入了贺老师的实验室，然后 ACM 就伴我走过了整个大学生涯（基本上每年暑假都留校1.3个月左右）。 在实验室的日子里，天天研究算法，我主要钻研的是 动态规划和 博弈论，其他基础算法。在这里 我学会了 如何自己去获取学习资料，从而快速掌握新的东西。 其实学会如何学习才是最重要的技能 。 在大四的时候，我跟系主任戴老师关系还可以，还经常跟他开玩笑。然后做毕设的时候跟他说：我要选贺老师作为毕业导师（因为跨专业，需要系主任点头）。 戴老师也很愉快的答应了。 记得选毕业课题的时候，贺老师说：如果没有好的方向的话，可以研究下judge core(hustoj 的判题核心：华中科的人写的，洋洋洒洒一个文件2000多行C代码 →_→)。 然后就在休息的时候和贺老师坐在一起，逐行看代码，遇到不懂的unix api 就一边百度。现在每每回想起，都能感到温暖。
　真的感谢生命中能够遇到这么好的你们，感觉这是上天对我的眷顾。</description>
    </item>
    
    <item>
      <title>离职前</title>
      <link>https://forrestsu.github.io/posts/work/%E7%A6%BB%E8%81%8C%E5%89%8D/</link>
      <pubDate>Sat, 01 Apr 2017 07:50:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E7%A6%BB%E8%81%8C%E5%89%8D/</guid>
      <description>1 瓶颈期 1.1 周围环境 　最近两天看了程序员的年终总结，还有自己所在团队小组部分人的离开。他们都是比我早来1年、2年、3年的同事(我导师2016年4月走的)，我能感觉到再呆2年估计也是和他们一样面对同样的问题（26/7也要回去成家立业，稳定的过日子了。）
　我对金融业务的不太感兴趣，去年领导也给我谈过个人的职业规划。(在这边可能技术层面就只能到目前这样了，如果想搞业务这边还是可以继续待下去的。)而我对技术更感兴趣。
1.2 自我感觉 　总体感觉，每天都在做重复的工作，老的架构，将要淘汰的开发语言。但我个人希望做一些有趣的事，接触点新东西。
　做的境外的系统，感觉有点闭门造车，做完都没有很好的环境测试，等到客户上线就怕有大的调整，而且感觉做的东西没有人用就没有成就感。
1.3 优点 　境外的业务文档写的比较清晰，国外大的系统都相对比较开放，基本都支持统一的接口（比如FIX），解决问题效率也高。
2 主流技术发展迅速 说到技术，不得不说当前软件技术的飞速发展，实在是超乎了我们的想象：
  一年前，我还认为，HTML5无非就是html加几个新的标签嘛，然而现在的h5，能做游戏，能做App，能做网站，能做各种酷炫的特效，这些都是HTML4的技术标准无法实现的，用几个HTML标签，你能做出来？
  一年前，我还认为，Javascript不就是个浏览器脚本语言嘛，然而现在的js，不仅能做app，能做游戏，甚至能做服务器，能做数据库，不只是能做，而且各大厂都开始支持js技术。谁能想到，当年大学课堂上，老师一带而过的浏览器脚本语言，如今已经火便整个互联网？
  一年前，我还不知道什么是大数据，而现在，在这个信息量爆炸的时代，大数据早不是什么新鲜事情了，身边处处都是大数据，像Docker，Hadoop这样的技术，早就已经耳熟能详了。</description>
    </item>
    
    <item>
      <title>恒生工作梳理</title>
      <link>https://forrestsu.github.io/posts/work/%E6%81%92%E7%94%9F%E5%B7%A5%E4%BD%9C%E6%A2%B3%E7%90%86/</link>
      <pubDate>Mon, 27 Mar 2017 11:19:05 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/%E6%81%92%E7%94%9F%E5%B7%A5%E4%BD%9C%E6%A2%B3%E7%90%86/</guid>
      <description>工作流程 一、 梳理工作流程 　售前去聊客户，看客户有没有新的业务需求，具体是哪家券商，然后达到对应的券商的业务接口。 业务人员 通过网络或者咨询客户业务部门等渠道了解，具体的业务流程，业务属性，以及想要实现的功能。 经过一轮业务分析，然后找客户确认功能需求。 开发拿到业务需求，确认信息是否足够，然后制定相应的修改方案。并进行修改方案评审，评审通过则分配到具体开发，进行修改。 开发修改完成然后递交集成，然后分发到测试，测试验证完毕。 最后客户测试环境线上测试通过，部署到生产。
二、 还需要熟悉的模块 　消息机制、主推，共享内存插件。
　后续会涉及消息主推，UFX消息插件的开发。
三、不足 　中间件相关的插件，具体实现还需了解。
总结 当你要辞职时，应该把你觉得应该能学到的东西都学到了，然后出去 以后不要后悔就行。</description>
    </item>
    
    <item>
      <title>posix-pthread (1)</title>
      <link>https://forrestsu.github.io/posts/cpp/posix-pthread-1/</link>
      <pubDate>Wed, 22 Mar 2017 17:48:27 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/posix-pthread-1/</guid>
      <description>进程和线程api对比    进程 线程     pid_t thread_t   fork pthread_create   waitpid pthread_jion   exit pthread_exit   在main函数中调用return 在线程函数中调用return   僵进程 僵线程   wait_pid pthread_jion    pthread_detach   kill pthread_cancel    知识点 1 使用pthread_detach 方法脱离一个线程就不会产生僵线程。 2 获取当前县城id 3 pthread_cancel可以杀死一个执行中的线程。</description>
    </item>
    
    <item>
      <title>QDII转换机工作汇总</title>
      <link>https://forrestsu.github.io/posts/work/qdii%E8%BD%AC%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E6%B1%87%E6%80%BB/</link>
      <pubDate>Tue, 21 Mar 2017 17:35:12 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/work/qdii%E8%BD%AC%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E6%B1%87%E6%80%BB/</guid>
      <description>1 概述  目前，我主要负责QDII的报盘，涉及证券代码的资讯、行情、交易报盘等任务。
操作手册《QDII操作手册－转换机部分.docx》 1 、设计文档 2。清单如下:
 qdii_archivehq (境外行情归档，境外业务日期自动切换) qdii_baseinfo (一系列彭博行情文件转换任务) qdii_fix (FIX转换任务) qdii_futhsfix (境外FIX期货报盘) qdii_hsfix (恒生FIX转换任务) qdii_realhq (彭博实时行情任务，聚源行情转换任务) qdii_reuterhq (路透Xtra3000行情转换) qdii_spfut (境外统一期货委托、 境外统一期货成交 、 境外统一期货行情)   下面有 √ 的任务需要代码走读。</description>
    </item>
    
    <item>
      <title>Docker install Ubuntu</title>
      <link>https://forrestsu.github.io/posts/tools/docker-install-ubuntu/</link>
      <pubDate>Tue, 21 Mar 2017 16:55:52 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/docker-install-ubuntu/</guid>
      <description>1 前言 Ubuntu on Windows都来了，还要啥自行车！Windows里也可以有Linux Shell了。 体验过的老司机说一下（Win10 14316），现在还不！稳！定！
当时我也是天真烂漫，格掉机器，Terminal弹出的一刹那，眼角湿润了！可是，当我装完了QQ等常用软件后发现，系统出错，各种不兼容。只能用Terminal的Windows，你们用过嘛。据说，更新为14367后，好多问题都解决了，还是先不要试了（逃.
2 安装 访问官方地址：https://www.docker.com/products/docker-toolbox ，下载Windows版本的Docker Toolbox。
然后点击next.
安装完之后启动Docker Quickstart Terminal. 启动前需先配置：windows下面没有设置VirtualBox的安装路径的环境变量（VBOX_MSI_INSTALL_PATH或者VBOX_INSTALL_PATH）
3 启动 双击Docker Quickstart Terminal 启动即可。
4 登陆 使用我们自己的终端登陆，用户：docker 密码：tcuser 5 安装ubuntu 下载最新的ubuntu:  docker pull ubuntu 查看镜像:  docker images 启动容器。docker run -t -i ubuntu:latest //bin/bash</description>
    </item>
    
    <item>
      <title>程序员如何留Email？</title>
      <link>https://forrestsu.github.io/posts/cs/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E7%95%99email/</link>
      <pubDate>Sun, 12 Mar 2017 22:21:45 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cs/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E7%95%99email/</guid>
      <description>有时候我们在公共网络上留下自己的Email，会收到垃圾邮件？ 那么我们可以这样留邮箱： 1 有人会把@换成 # 2 还有人会用base64加密
 echo 邮箱号 | base64
 我的电子邮件地址是—— echo c3VucXVhbmFAZ21haWwuY29tIA0K | base64 -d 我想你应该知道怎么做。</description>
    </item>
    
    <item>
      <title>Git原理分析</title>
      <link>https://forrestsu.github.io/posts/git/git%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 09 Mar 2017 11:24:45 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/git/git%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>Git Analysis 1 我们通过实验的方式来分析，Git是如何管理本地代码的。 我们在alpha目录下新建一个number.txt文件，echo first &amp;gt;number.txt。
 git init git add number.txt
 此时在.git 下会产生一个index 文本文件 查看文件： object 下会产生一个9c的文件夹，然后后面跟长度为38的字符串。（也就是40位的sha-1,前面2位作为文件夹名作为索引。） 我们用sha-1计算出 </description>
    </item>
    
    <item>
      <title>Linux 服务端编程（一）</title>
      <link>https://forrestsu.github.io/posts/cpp/linux-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%B8%80/</link>
      <pubDate>Fri, 24 Feb 2017 17:29:28 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/linux-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%B8%80/</guid>
      <description>ftok()函数 系统建立IPC通讯 （消息队列、信号量和共享内存） 时必须指定一个ID值。通常情况下，该id值通过ftok函数得到。 函数原型：key_t ftok( const char * fname, int id ); (id&amp;gt;0) fname就是你指定的文件名（已经存在的文件名），一般使用当前目录。
在一般的UNIX实现中，是将文件的索引节点号取出。(文件重建将会分配一个新的索引节点号) ftok 返回值组成：hex(id)&amp;amp;0xff03 hex(节点号)&amp;amp;0xffff。 传入的id低8位+0x03+ 节点号的低16位。（test on redhat ） 可通过 ls -l 查看文件节点值。
Usage 1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>travel-2017</title>
      <link>https://forrestsu.github.io/posts/travel/travel-2017/</link>
      <pubDate>Mon, 20 Feb 2017 20:21:25 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/travel/travel-2017/</guid>
      <description>一、 想去的地方  龙门古镇 （浙江杭州）  </description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>https://forrestsu.github.io/about/</link>
      <pubDate>Tue, 14 Feb 2017 23:39:53 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/about/</guid>
      <description>&lt;p&gt;C++开发攻城师，Python和Java打杂师，擅长分布式，高并发，低延时服务。&lt;/p&gt;
&lt;h2 id=&#34;quan-sun孙权&#34;&gt;Quan Sun(孙权)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Web&lt;/strong&gt;&lt;br&gt;
　　https://forrestsu.github.io&lt;br&gt;
&lt;strong&gt;Email&lt;/strong&gt;&lt;br&gt;
　　sunquana@gmail.com&lt;/p&gt;
&lt;h2 id=&#34;skill&#34;&gt;Skill&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;编程语言: C/C++, Java, Python.&lt;/li&gt;
&lt;li&gt;熟悉Linux命令，服务端编程，Git&lt;/li&gt;
&lt;li&gt;快速学习和解决问题的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;experience&#34;&gt;Experience&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2015.07 - 现在，软件工程师, &lt;a href=&#34;http://www.hundsun.com/&#34;&gt;Hundsun&lt;/a&gt; Company, HangZhou.&lt;/li&gt;
&lt;li&gt;2011.09 - 2015.06，就读于湖南农业大学，计算机专业。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>工作总结-2016年</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-2016%E5%B9%B4/</link>
      <pubDate>Mon, 13 Feb 2017 11:04:13 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93-2016%E5%B9%B4/</guid>
      <description>前言 　今年是来恒生的第二年（如果算上实习的话）</description>
    </item>
    
    <item>
      <title>2017新年计划</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/2017%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/</link>
      <pubDate>Fri, 10 Feb 2017 11:03:56 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/2017%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/</guid>
      <description>时间：2017年1月26~ 2017年2月3日
1月26日 计划和同学聚会
1月27日 除夕
1月28日 初一，在家呆着。
1月29日 时间：2017年1月26~ 2017年2月3日
1月26日 计划和同学聚会
1月27日 除夕
1月28日 初一，在家呆着。
1月29日</description>
    </item>
    
    <item>
      <title>个人的优点与不足</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E4%B8%AA%E4%BA%BA%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E4%B8%8D%E8%B6%B3/</link>
      <pubDate>Wed, 08 Feb 2017 15:58:52 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/%E4%B8%AA%E4%BA%BA%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E4%B8%8D%E8%B6%B3/</guid>
      <description>我的优点 好像还没发现什么优点&amp;hellip; &amp;gt;_&amp;lt;
我的不足之处 1 演讲或者给别人分享的时候：&amp;lt;我声音太小&amp;gt; 2017-02-08
 声音要大一点。（不然声音太小，会显得很没有底气）
 2 &amp;lt;不够谦逊&amp;gt; 2017-08-07
 (1) 务必时刻保持一颗谦虚的心，背后多言他人的溢美之词，我只需取其善者而从之，不善者而改之。 (2) 也不能自己的想法强加给别人，我只需要管好我自己。(己所不欲，勿施于人; 穷则独善其身) (3) 毕竟写点业务代码也没啥难的，都有成熟的解决方案，我的眼光应该放的更长远，有发牢骚的时间，还不如看看框架和底层 (发挥算法还没荒废了)。 (4) 时常反思自己的一言一行，换位思考。(慎言笃行)
 3 &amp;lt;有点拖延症&amp;gt; 2017-08-07
 想写的文章一直拖着，没有抽点时间去写。</description>
    </item>
    
    <item>
      <title>如何配置nginx php7(windows)</title>
      <link>https://forrestsu.github.io/posts/web/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEnginx-php7windows/</link>
      <pubDate>Wed, 01 Feb 2017 21:39:21 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/web/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEnginx-php7windows/</guid>
      <description>本文主要介绍如何用Nginx(engine x) 搭建php7的服务器。
1 StartUp  Nginx http://nginx.org/en/download.html php7 ： http://windows.php.net vc14： https://www.microsoft.com/zh-CN/download/details.aspx?id=48145 （vcruntime14） RunHiddenConsole： http://redmine.lighttpd.net/attachments/660/RunHiddenConsole.zip  2 Install 1 安装vc14 2 解压nginx到D:\Portable\nginx-1.10.3 3 解压Php到D:\Portable\php-7.1.1x64
3 修改配置文件 3.1 nginx 配置文件 1 修改nginx.</description>
    </item>
    
    <item>
      <title>XSL 语言(2)</title>
      <link>https://forrestsu.github.io/posts/web/xsl-%E8%AF%AD%E8%A8%802/</link>
      <pubDate>Wed, 18 Jan 2017 15:56:07 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/web/xsl-%E8%AF%AD%E8%A8%802/</guid>
      <description>上一篇主要入门了 XSL，这一课来进一步学习XSL。
1 语法 (1) xsl:if 元素 语法：
1 2 3 4 5  &amp;lt;xsl:if test=&amp;#34;expression&amp;#34;&amp;gt; ... ...如果条件成立则输出... ... &amp;lt;/xsl:if&amp;gt;   如需添加有条件的测试，请在 XSL 文件中的 xsl:for-each 元素内部添加 xsl:if 元素。(下面的代码仅仅会输出价格等于 10 的 CD 的 title 和 artist 元素) 注：小于等于 可以组合起来使用。</description>
    </item>
    
    <item>
      <title>XSL 语言</title>
      <link>https://forrestsu.github.io/posts/web/xsl-%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Wed, 18 Jan 2017 14:08:31 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/web/xsl-%E8%AF%AD%E8%A8%80/</guid>
      <description>1 Introduction XSL 指扩展样式表语言（EXtensible Stylesheet Language）。
XSLT 是指 XSL 转换(transfer)，这里主要来学习如何用XSLT将XML 文档转换为其他文档，比如 XHTML。样例XML文件：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  &amp;lt;?</description>
    </item>
    
    <item>
      <title>全麻，一次性拔四颗智齿是怎样一种体验</title>
      <link>https://forrestsu.github.io/posts/diary/%E5%85%A8%E9%BA%BB%E4%B8%80%E6%AC%A1%E6%80%A7%E6%8B%94%E5%9B%9B%E9%A2%97%E6%99%BA%E9%BD%BF%E6%98%AF%E6%80%8E%E6%A0%B7%E4%B8%80%E7%A7%8D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 16 Jan 2017 00:03:59 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/diary/%E5%85%A8%E9%BA%BB%E4%B8%80%E6%AC%A1%E6%80%A7%E6%8B%94%E5%9B%9B%E9%A2%97%E6%99%BA%E9%BD%BF%E6%98%AF%E6%80%8E%E6%A0%B7%E4%B8%80%E7%A7%8D%E4%BD%93%E9%AA%8C/</guid>
      <description>1 前言  右上颌一年前长了一颗智齿，当时刚萌出的时候还有点小发炎，现在感觉越长越歪，刷牙也刷不到，而且每次吃饭都会食物卡在智齿上。听同事说几分钟就能拔掉，所以先到Google了「杭州拔智齿&amp;hellip;」相关的话题，然后找到了知乎的一个帖子，看了下回复，就找到了一位姓廖医生（门诊就挂她的号）。
2 门诊检查  在风和日丽的一个早上（2016-12月17日星期六），就去杭州口腔医院挂号、直奔５楼，廖医生建议先拍个片子。  看完片子，廖医生说：“四颗埋伏智齿，只有一颗萌出了一点，其他3颗都还在牙肉里，下面两颗牙槽神经线比较近，每颗难度和风险都不小，门诊拔除的话可能风险比较高，每次只能拔1~2颗，建议住院全麻一次性拔除！”我犹豫又思索了一会儿，还是决定一次性拔了算了，免得后面智齿继续长的话，东西都吃不了。（之前看到知乎上的贴子说老美拔智齿都是全麻的）。在和廖医生沟通了手术先关的事项后，决定20号住院21号手术。于是给领导打了个电话说明了原由，请了4天假。然后给我妈打电话来杭州来照顾我三天，顺便来杭州玩一下。
3 手术  第一天(20号)，医生会问下病史，各种化验胸片心电图，手术医生和麻醉医生找你谈话签字。 第二天中午12点左右，我换好病服，进入手术室（这是我自记事以来生平第一次进手术室），医生话了几句家常就迷迷糊糊的睡着了，然后一觉醒来，只听见旁边有声音再说：“醒了，睁眼了！”（有点像电影里的剧情）“手术过程很顺利，四颗智齿全部拔除！” 医生说。听完这句，我正想合上还没完全睁开的双眼继续睡，医生说：“不要睡着，不断的伸腿，收腿，直到没有睡意！” 其间感觉不到明显的疼痛，一直用抽纸擦除口中带血的唾液。就这样在观察室度过了4小时回到了普通病房。 晚上隔壁一个病友的妈妈送来的一盒温牛奶和2瓶酸奶，吃完就在走廊上散步。 第三天，挂盐水，脸部还是有轻微的肿，护士MM又拿了一袋冰袋敷了下。 第四天，照旧挂盐水，办出院手续，结账出院。 整个手术下来，基本上没有明显的疼痛，手术后第一个周六(手术后第10天)去医院拆完缝线，回来就能吃米饭了，感觉恢复的挺好。 全麻拔牙体验  第一次全麻手术，手术前还是有些许忐忑不安的，然后在知乎上也搜了相关的帖子，发现老美基本都是全麻拔智齿，也基本打消了我的疑虑。 拔牙的时候是一觉睡过去的，基本没有感觉。大约2个小时后醒来，就躺在观察室的病床上，没有明显的痛感，脸颊有轻微的肿，说话不利索，唾液里还会有血。醒来5~6个小时后就能喝点牛奶(或者酸奶)了，很想吃东西，但是嘴巴只能张一点，因为下面两颗智齿都没有长出来，创口有缝线。 晚上睡觉只能仰睡，脸腮还会有隐隐的痛，睡觉的时候偶尔就会醒来，不过第二个晚上就好很多了。住院期间，廖医生都会带医务人员来查房，问下有什么不适，感觉还是蛮体贴温馨的。 整个全麻手术下来，基本没有明显的疼痛感，术后恢复的也很顺利。非常感谢廖医生^_^。
插曲  和隔壁的病友妹子聊天，她问我拔完有没有感觉到痛，我说基本不怎么痛。妹子说：我恢复的比她快，然后妹子第三天就出院了。（囧）</description>
    </item>
    
    <item>
      <title>「Silicon Valley 3 」观后感</title>
      <link>https://forrestsu.github.io/posts/readingnotes/silicon-valley-3-%E8%A7%82%E5%90%8E%E6%84%9F/</link>
      <pubDate>Sun, 11 Dec 2016 00:46:13 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/silicon-valley-3-%E8%A7%82%E5%90%8E%E6%84%9F/</guid>
      <description>硅谷一个在硅晶体上发展起来的城市，一波又一波聪明的年轻人在这里改变着世界。 今天周末，在房间里休息看了硅谷3，感受了一下像google、Twitter、Facebook、Uber、Arbin这一类的公司是如何发展起来的，就像google，两个年轻人搞出来一个搜索算法，Twitter搞了一个社交网络! 硅谷3主要以day-to-day的方式描述了Engineer的日常，风险投资人来资助Good idea,当然也有很多创意项目在孵化期间就陨灭了。但是一旦成长起来就能够掀起一波互联网的浪潮。感觉到底是干一行爱一行还是做自己喜欢的事?看了</description>
    </item>
    
    <item>
      <title>Java 反射机制(1)</title>
      <link>https://forrestsu.github.io/posts/java/java-reflection/</link>
      <pubDate>Wed, 07 Dec 2016 23:28:21 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/java/java-reflection/</guid>
      <description>什么是反射 反射（Reflection）是java的特征之一。
 1 能够在运行时动态检查类自身的类和方法。
2 能够获得java类中各个成员的名称并显示出来。
 javaBean是reflection的实际运用之一。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // src/HelloWorld.java public static void main(String[] args) { // TODO Auto-generated method stub  try { Class c = Class.</description>
    </item>
    
    <item>
      <title>My Chrome Plugin</title>
      <link>https://forrestsu.github.io/posts/tools/my-chrome-plugin/</link>
      <pubDate>Tue, 06 Dec 2016 08:44:52 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/my-chrome-plugin/</guid>
      <description>广告拦截   隐私保护   文档查看   写邮件   书签查找   网页截图工具   Github代码查看   标签页管理   Scroll To Top (offered by AlphaTr)</description>
    </item>
    
    <item>
      <title>访问git网页排版紊乱</title>
      <link>https://forrestsu.github.io/posts/git/%E8%AE%BF%E9%97%AEgit%E7%BD%91%E9%A1%B5%E6%8E%92%E7%89%88%E7%B4%8A%E4%B9%B1/</link>
      <pubDate>Sun, 06 Nov 2016 21:02:59 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/git/%E8%AE%BF%E9%97%AEgit%E7%BD%91%E9%A1%B5%E6%8E%92%E7%89%88%E7%B4%8A%E4%B9%B1/</guid>
      <description>在chrome下用F12查看（右键- &amp;gt; 审察元素）有几个请求TIMED_OUT 了，猜想应该是github的DNS被 GFirewall 污染了。
解决办法 修改hosts文件，直接通过IP访问github的CDN assets-cdn.github.com，不用域名解析。
通过 www.ipaddress.com 这个网站查询assets-cdn.github.com的IP地址，然后在hosts中增加一条。
 151.101.44.133	assets-cdn.github.com 151.101.12.133	avatars0.githubusercontent.com
 然后在控制台刷新下DNS缓存：
 ipconfig /flushdns
 最后访问github.com首页，布局就显示正常了。</description>
    </item>
    
    <item>
      <title>一个关于合伙吃饭的问题</title>
      <link>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E5%90%88%E4%BC%99%E5%90%83%E9%A5%AD%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 18 Oct 2016 23:42:39 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%9D%82%E8%B0%88/%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8E%E5%90%88%E4%BC%99%E5%90%83%E9%A5%AD%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>最近和4～5个同事经常一起在外面吃饭，因为要充卡买单，所以每个人都出了100，然后充卡，一起消费。 那么问题来了，可能某个同事有一天请假了，就需要向这个同事返一定的金额，这个金额应该是多少？（注：吃饭的人一定是合伙出钱的人） A 本次消费金额/本次吃饭人数 B 本次消费金额/合伙出钱的总人数 答案 A要保证资金池里面，每个人的剩余金额均相等。</description>
    </item>
    
    <item>
      <title>First Blog for Me</title>
      <link>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/first-blog-for-me/</link>
      <pubDate>Thu, 13 Oct 2016 18:04:13 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/%E6%B5%AE%E7%94%9F%E8%8B%A5%E6%A2%A6/first-blog-for-me/</guid>
      <description>这个小站将以技术分享学习为主，当然也同样会记录我生活的喜怒哀乐， 作为我小小人生的一个旁观者，也许若干年后回头看，会有别样的心情。</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://forrestsu.github.io/archives/</link>
      <pubDate>Mon, 26 Sep 2016 00:23:04 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>git cherry-pick</title>
      <link>https://forrestsu.github.io/posts/git/git-cherry-pick/</link>
      <pubDate>Mon, 12 Sep 2016 01:10:59 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/git/git-cherry-pick/</guid>
      <description>1 cherry-pick 　git cherry-pick可以选择某一个分支中的一个或几个commit(s)来进行操作。 例如，假设我们有个稳定版本的分支，叫v2.0，另外还有个开发版本的分支v3.0，我们不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个v3.0中的功能到v2.0中，这里就可以使用cherry-pick了。 如下图，比如我们想将master的C5修改记录，也提交到dev-feature这个分支上，我们可以使用：
 git cherry-pick ee99d9a
 如果没有修改文件的同一行则提交顺利。如果有冲突则需要手工解决。
2 冲突解决 如下图，我们进行cherry-pick发生了冲突。git 提示我们先手工修复，然后git add [patchs],最后git commit 即可。 通过git status 可以选择终止cherry-pick 或者继续。 解决完冲突后: 《完》</description>
    </item>
    
    <item>
      <title>git merge 和git rebase的区别</title>
      <link>https://forrestsu.github.io/posts/git/git-merge-%E5%92%8Cgit-rebase%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 11 Sep 2016 23:57:14 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/git/git-merge-%E5%92%8Cgit-rebase%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>最近在学习git的版本控制，分支之间的同步、冲突处理，cherry-pick等有趣的功能。下面是整理的一些学习笔记。
一、git merge [branchName] 　顾名思义，就是合并分支，比如你当前代码库有两个分支一个是master，另一个是dev-feature。(如下图) 我们在dev-feature 分支，想同步master的通用修改：
 git checkout dev-feature git merge master
 　Git会按照修改的时间点将master分支的修改记录依次应用到dev-feature分支。 我们使用git log 可以看到修改记录依次为（从新到旧）：C7←C5←C6←C3←C4←C2←C1。
二、git rebase [branchName] 　按照字面意思立即就是变基，比如我们当前在dev-feature分支，执行git rebase master，Git会先找到new-feature分支和master的最近公共祖先（C2结点），然后把当前分支的后续修改依次应用于master分支。 Git会把C4和C6节点回收，可以用git gc查看。</description>
    </item>
    
    <item>
      <title>背包九讲01-关于常数的优化</title>
      <link>https://forrestsu.github.io/posts/algorithm/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B201-%E5%85%B3%E4%BA%8E%E5%B8%B8%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 28 Aug 2016 01:13:01 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/algorithm/%E8%83%8C%E5%8C%85%E4%B9%9D%E8%AE%B201-%E5%85%B3%E4%BA%8E%E5%B8%B8%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/</guid>
      <description>Preface 01背包容量为V，在求能装入物品的获得最大价值dp[V]时，有一个常数优化。（也适用于恰好装满容量为V的01背包问题） 说明:大写字母V表示背包的容量。
关于一个常数优化的问题 前提：如果我们最后只想计算出dp[V]的值，根据动归方程：
1  dp[v]=max(dp[v], dp[v-ci]+wi);//i表示第i个物品   当计算到第n个物品时，我们只需要知道dp[V-cn]的值是多少，也就是说计算第n-1个物品的时候，正常for循环下标 v 应该递减至第n-1件物品的cost，但是下一步得到答案只需要知道dp[V-cn]，我们一旦到达下标 V-cn，即可提前中止当前(n-1物品的)循环。
也就是说，当处理第i个物品时只需要循环到： 备注：原作者手误把公式中ｃi+1写成了ｗi。
更进一步优化————物品顺序 在上一步的优化下，我们发现先处理花费较大的物品会使得后续物品的循环次数更少，所以我们还可以做一个优化：把物品按照花费从大到小排序。
最后： 基于上面两步优化，我在网上找个题目(nyoj654)来验证下正确性,运行结果如下。 代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64  /** nyoj: 654*/ //c header #include &amp;lt;cstdlib&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;//cpp header #include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;string&amp;gt; using namespace std; #define M 1100000 //Max bag&amp;#39;s Capacity #define N 120 //Max Item&amp;#39;s amount #define CLS(x,v) memset(x,v,sizeof(x)) typedef pair&amp;lt;int,int&amp;gt; ppi; /**Cap is the bag&amp;#39;s Capacity; SumCost is the sum of Item&amp;#39;s cost*/ int dp[M],Cap,SumCost; /** first is cost ,second is weight*/ int cmp(ppi x,ppi y) { //return true will be Swap elements  return x.</description>
    </item>
    
    <item>
      <title>年中总结</title>
      <link>https://forrestsu.github.io/posts/diary/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 19 Aug 2016 00:43:54 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/diary/%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</guid>
      <description>我今年23岁，从毕业到今天(2016-08-18)，大约来杭州工作也有一年时间了。
工作上 今天晚上7:30领导半年度谈话，浑浑噩噩又过了半年，没有了寒暑假的日子感觉就是度年如日，自从我导师离职，加入到QD小组快有3～4月了，感觉工作任务有点多，但是整体还好。后续还需要提高工作效率。凌总问我以后是想走业务路线还是技术路线？答曰：还没想好！应该是时候规划一下了。 下半年主要是境外期货业务。
生活上 生活上整体还好，这半年都宅在房子里，西湖都没去几次～说来惭愧。体重长胖了几斤。大约每两周用微信给爷爷打一次电话。
学习上 计划看十本书 现在大约看了5本，每周计划写一次的博客只写了几篇，计划旅游还没有着落。看了一部美剧(囧)。后面得规划下时间。 ~记于江畔云庐 2016-08-19 00:28~</description>
    </item>
    
    <item>
      <title>晓松奇谈</title>
      <link>https://forrestsu.github.io/posts/readingnotes/%E6%99%93%E6%9D%BE%E5%A5%87%E8%B0%88/</link>
      <pubDate>Sat, 06 Aug 2016 21:11:50 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/%E6%99%93%E6%9D%BE%E5%A5%87%E8%B0%88/</guid>
      <description>历史不是镜子，历史是精子，牺牲亿万，才有一个活到今天。人生不是故事，人生是事故，摸爬滚打，才不辜负功名尘土。</description>
    </item>
    
    <item>
      <title>忆往事-梦醒十分</title>
      <link>https://forrestsu.github.io/posts/diary/%E5%BF%86%E5%BE%80%E4%BA%8B-%E6%A2%A6%E9%86%92%E5%8D%81%E5%88%86/</link>
      <pubDate>Thu, 04 Aug 2016 03:04:52 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/diary/%E5%BF%86%E5%BE%80%E4%BA%8B-%E6%A2%A6%E9%86%92%E5%8D%81%E5%88%86/</guid>
      <description>夜半梦回初醒，梦着和邻家女孩初中一起上学补课的日子，感觉那么无忧无虑和惬意。
关于太爷爷 　在我最早对死亡有明显的意识是在2012年9月左右，我太爷爷去世，经常有人提起都说他很长寿。那天我请假回家参加太爷爷的丧事，我们那里有个风俗——丧事晚上会请说书的先生说大半夜书，下面的孝子贤孙跪倒一片，后半夜就是孝子贤孙给死去的亲人在路上撒钱。那晚我和大人们跪了大半夜。（应该中国的很多地方都有这种风俗） 对太爷爷的记忆随着时间的推移轮廓变得逐渐模糊，不算太高，看起来有点瘦，生活基本上都是自理，只有过年的时候亲戚朋友会塞上几百块钱。每年大学的暑假都会先回家休息一个月，然后再去学校实验室集训一个月。那年暑假，我太爷爷正好摔跤了，然后每天我和爷爷吃饭前，爷爷都让我去给太爷爷送饭。小时候太爷爷一直对我很好，经常来我家串个门，看会儿电视，翻翻族谱，找到自己的名字，然后弓着背回去了。有时还会给我带点好吃的，比如山里姑爹送来的柿子，还无花果-直到有一天送饭才发现是他在屋旁自己种的无花果。摔倒的那个月，太爷爷生活不能自理，我赵赵姑爹会骑个自行车隔三差五过来帮忙洗下被套，打扰卫生，点下蚊香，买点卫生纸之类的。所以我每年回家都会看下这几个姑爹。
关于奶奶 下面开始讲我的奶奶，我奶奶是个勤快的庄稼人，一天到晚忙着地里除草打药，经常忙到很晚，有时我叫她吃饭才肯回，后来很多亲戚都说她是因劳成疾。老一辈的人都很节省，舍不得花钱，一年到头也没添置几件新衣裳，但我爷爷花钱可不是那么懂得精打细算的人，所以奶奶偶尔会和爷爷吵架。后来奶奶生病住院，县城里的医院没有治疗条件，医生推荐去市里治疗，我爷爷直接把奶奶送往市人民医院，虽然医生说只能定期透析多活些日子，我爷爷也坚持治疗，希望能治好。住院期间也问奶奶喜欢吃的东西，买给她吃，平日里她也舍不得给自己花钱。
隔壁的奶奶听说身体不好，我得打电话问下。 &amp;ndash;记于杭州江畔云庐 2016年8月4日星期四凌晨3:40</description>
    </item>
    
    <item>
      <title>C&#43;&#43;关于NULL、0、nullptr</title>
      <link>https://forrestsu.github.io/posts/cpp/c&#43;&#43;%E5%85%B3%E4%BA%8Enull0nullptr/</link>
      <pubDate>Sun, 17 Jul 2016 01:11:00 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/c&#43;&#43;%E5%85%B3%E4%BA%8Enull0nullptr/</guid>
      <description>一 关于NULL、0、nullptr 1 在C语言中NULL被定义为：一个void* 指针，指向的地址为0。
1  #define NULL ((void *)0)   所以在C语言中我们通常会写出如下语句
1 2  int *i = NULL; foo_t *f = NULL;   2 而在C++中，NULL会被定义为0
1 2 3 4 5  #ifndef __cplusplus #define NULL ((void *)0) #else /* C++ */#define NULL 0 #endif   3 C++11引入了nullptr 来表示空指针</description>
    </item>
    
    <item>
      <title>PCLint9安装_(软件质量之道)</title>
      <link>https://forrestsu.github.io/posts/cpp/pclint9%E5%AE%89%E8%A3%85_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B9%8B%E9%81%93/</link>
      <pubDate>Sat, 04 Jun 2016 17:35:23 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/cpp/pclint9%E5%AE%89%E8%A3%85_%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E4%B9%8B%E9%81%93/</guid>
      <description>目前官网最新版是PCLint9.0L(2016-6-3) 2. 接下来弹出PCLint的配置程序，点击下一步开始配置。 </description>
    </item>
    
    <item>
      <title>2016-Plans</title>
      <link>https://forrestsu.github.io/posts/travel/2016-plans/</link>
      <pubDate>Fri, 03 Jun 2016 22:22:05 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/travel/2016-plans/</guid>
      <description>Coding 1 找到一个女朋友。 2 在Github上Commit 3+个项目。 3 看5本非技术书，看5本技术书集。
 《李世乭自传》&amp;ndash;在读&amp;hellip; 《有味》-汪涵 &amp;ndash;读完 《Linus Torvalds自传》(中文版) 《Operating Systems Design &amp;amp; Implementation 3rd Edition》 &amp;ndash;计划读  TRAVEL 云南旅游一次，大理，丽江。（八月份）
去一次西藏旅游。（国庆节）</description>
    </item>
    
    <item>
      <title>Sublime Text 3 Markdown</title>
      <link>https://forrestsu.github.io/posts/tools/sublime-text-3-markdown/</link>
      <pubDate>Mon, 16 May 2016 00:22:06 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/sublime-text-3-markdown/</guid>
      <description>1 MarkdownEditing Markdown高亮显示 安装完后需修改GFM Settings-User文件，添加我们自己个性化的配置： 添加如下内容：
 { &amp;ldquo;color_scheme&amp;rdquo;: &amp;ldquo;Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme&amp;rdquo;, &amp;ldquo;draw_centered&amp;rdquo;: false, &amp;ldquo;line_numbers&amp;rdquo;: true, &amp;ldquo;highlight_line&amp;rdquo;: true, //wrap_width表示多少个字符显示到下一行,0表示不限制 &amp;ldquo;wrap_width&amp;rdquo;:0 }
 最后我们新建一个md文件就可以开始写作了^_^ 2 安装markdown-preview 这个插件可以把Markdown书写的文本输出为github样式html文件，作用：本地开发Git项目预览readme的效果。
 git clone https://github.com/revolunet/sublimetext-markdown-preview MarkdownPreview
 然后可以修改MarkdownPreview的settings-user文件,开启部分我们需要的功能。</description>
    </item>
    
    <item>
      <title>Sublime Text 3 UML</title>
      <link>https://forrestsu.github.io/posts/tools/sublime-text-3-uml/</link>
      <pubDate>Sun, 15 May 2016 14:19:58 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/sublime-text-3-uml/</guid>
      <description>1 UML图 我们先看用ST3书写脚本生成的UML图效果，写以下脚本保存为test.wsd文件
 @startuml
skinparam defaultFontName 宋体 用户 -&amp;gt; Bob: Authentication Request Bob -&amp;gt; Alice : Hello, how are you Consolas Alice -&amp;gt; Bob : Fine, thank you, and you?</description>
    </item>
    
    <item>
      <title>Sublime Text3 C语言插件</title>
      <link>https://forrestsu.github.io/posts/tools/sublime-text3-c%E8%AF%AD%E8%A8%80%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sat, 14 May 2016 15:20:30 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/sublime-text3-c%E8%AF%AD%E8%A8%80%E6%8F%92%E4%BB%B6/</guid>
      <description>0 sublime-text-git安装 ctrl+shift+p 输入pci，然后搜索git直接安装即可。 这个插件可以直接使用git命令，很方便，git log 显示所有commit的记录，继续输入还支持搜索哦（介个功能很不错）。 1 GitGutter 这个可以左侧实时显示文件的修改 2 Alignment 官方目前还没更新支持ST3，安装后在Preferences -&amp;gt;key bindings-User中加入如下一句，然后选中c++的代码，按ctrl+d 就可以按等号(=)对齐。
 //1.Alignment 代码自动对齐 { &amp;ldquo;keys&amp;rdquo;: [&amp;ldquo;alt+d&amp;rdquo;], &amp;ldquo;command&amp;rdquo;: &amp;ldquo;alignment&amp;rdquo; }
 3 C Improved 更加丰富的C语言着色方案 然后点击右下角c++，可将*.</description>
    </item>
    
    <item>
      <title>Sublime Text 3 设置</title>
      <link>https://forrestsu.github.io/posts/tools/sublime-text-3-%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sat, 14 May 2016 14:13:40 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/sublime-text-3-%E8%AE%BE%E7%BD%AE/</guid>
      <description>1 User 1 通过快捷键开控制自动换行，在Preferences -&amp;gt;key bindings-User添加如下内容即可。
 { &amp;ldquo;keys&amp;rdquo;: [&amp;ldquo;ctrl+shift+w&amp;rdquo;], &amp;ldquo;command&amp;rdquo;: &amp;ldquo;toggle_setting&amp;rdquo;, &amp;ldquo;args&amp;rdquo;: {&amp;ldquo;setting&amp;rdquo;: &amp;ldquo;word_wrap&amp;rdquo;} }
 </description>
    </item>
    
    <item>
      <title>Sublime Text 3 插件安装</title>
      <link>https://forrestsu.github.io/posts/tools/sublime-text-3-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</link>
      <pubDate>Thu, 12 May 2016 13:17:06 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/tools/sublime-text-3-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</guid>
      <description>1 安装package control包管理器 可通过命令行的方式和手工下载的方式，按 ctrl+\ `进入控制台，输入下面的命令，然后重启st即可：
 import urllib.request,os,hashlib; h = &amp;lsquo;2915d1851351e5ee549c20394736b442&amp;rsquo; + &amp;lsquo;8bc59f460fa1548d1514676163dafc88&amp;rsquo;; pf = &amp;lsquo;Package Control.sublime-package&amp;rsquo;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &amp;lsquo;http://packagecontrol.io/&#39; + pf.</description>
    </item>
    
    <item>
      <title>我的导师-晨曦初见</title>
      <link>https://forrestsu.github.io/posts/life/%E6%88%91%E7%9A%84%E5%AF%BC%E5%B8%88-%E6%99%A8%E6%9B%A6%E5%88%9D%E8%A7%81/</link>
      <pubDate>Fri, 08 Apr 2016 17:11:07 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/life/%E6%88%91%E7%9A%84%E5%AF%BC%E5%B8%88-%E6%99%A8%E6%9B%A6%E5%88%9D%E8%A7%81/</guid>
      <description>华灯初上，时光匆匆，一眨眼来恒生已经8个月了，从刚开始的什么都懵懵懂懂，到现在感觉自己还有好多不懂，就像大四才发现自己还有好多东西需要学，却要离开了。　今天，被主管 LQ 叫去谈话，问是否有意愿参加新项目的开发： 新项目是「境外证券业务，主要面对的客户是券商、信托和银行。你也知道资管SQL版已经10多年了，我们不得不面临的一个问题：产品转型(逐渐被O32替代)，所以我们准备把O32一个停滞的境外业务接管起来，前期(3个月)主要是一个质保的工作，前台是delphi，cres中间件，后台是Oracle ,运行在linux下」。
 每个小组需要抽出一个人来组件一个4~5人的小团队，后续会把当前team的人加进来。zqp(我导师)推荐你来负责报盘这一块的。我说：可以，为什么我导师不来？凌总说：“他有点事&amp;hellip;就是有事 &amp;gt;_&amp;lt; (女生娇羞表情(⊙o⊙)…) 突然感觉有什么事要发生，来恒生1年还差4个月，我们小组走了2个人(sqy在15年10月走的，留下深圳五版让我负责，yaol在2016-4-11就不来公司了)，感觉人事变动有点大。 下面说说我的导师吧！ 我人生中的第一份工作(2015年6月大学毕业)的第一任导师 zqp ,我感觉我很幸运，因为大一点的事都是他担着的，比如： 1. 每周例会的时候，都会把你好的一面说出来； 2. 比如你每次有问题的时候，都会不厌其烦的解答你的疑问。 现在他要离开了，突然间感觉变成了“孤儿”，前方的路还好长,需要你继续前行（就像大学里，实验室的学长毕业离开了，我们变成了学弟学妹眼下的学长，开始给 TA 们备课讲课）!
 现在想想有时候让你多担点事，多指出你的缺点，是不是能够成长的更快一点，毕竟我不能一直呆在象牙塔里，很多事都得学会独自面对。(20170805补记)
  人生的旅途，我们偶然相遇，然后分开，但是不要伤感，因为我们的征途是星辰大海！
 记于江畔云庐 2016-04-08 晚22:13</description>
    </item>
    
    <item>
      <title>《有味》汪涵</title>
      <link>https://forrestsu.github.io/posts/readingnotes/%E6%9C%89%E5%91%B3%E6%B1%AA%E6%B6%B5/</link>
      <pubDate>Thu, 07 Apr 2016 19:28:27 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/readingnotes/%E6%9C%89%E5%91%B3%E6%B1%AA%E6%B6%B5/</guid>
      <description>2016-04-07 第一次看到《有味》(汪涵)的这本书是在高三的时候，上午第二节课做完午间操，都会路过书店，当时只是走马观花看了一下，最近才在「微信读书」上看完了。 汪涵生于苏州，自幼随父母到湖南湘潭生活，毕业于湖南广电，积极上进，成就了今天的汪涵。看完整本书，如果汪涵非常喜欢手工艺品，喜欢琴棋书画。 男生小时候都喜欢自己做点什么，比如砍个树杈做弹弓，找根竹竿做吊杆，我记得我小时候喜欢自己做过一个风铃，在海边捡的贝壳，要爷爷在山上砍的大约10cm的竹筒。然后我就一个劲的在竹筒上钻孔，引线，最后悬挂在床帘上，有风时可以看到贝壳随风摆动(感觉非常有成就感)。</description>
    </item>
    
    <item>
      <title>关于香港旅游签证</title>
      <link>https://forrestsu.github.io/posts/travel/%E5%85%B3%E4%BA%8E%E9%A6%99%E6%B8%AF%E6%97%85%E6%B8%B8%E7%AD%BE%E8%AF%81/</link>
      <pubDate>Sat, 09 Jan 2016 22:21:52 +0800</pubDate>
      
      <guid>https://forrestsu.github.io/posts/travel/%E5%85%B3%E4%BA%8E%E9%A6%99%E6%B8%AF%E6%97%85%E6%B8%B8%E7%AD%BE%E8%AF%81/</guid>
      <description>过些日子计划带父母去香港逛逛，顺便品尝下香港的美食小吃，不能光顾着自己嗨 (不能一人吃饱全家不饿) ，好了不多废话了，下面谈谈签证的问题。
一、签证分类 1 团队旅游L：
分为三个月一次或两次、一年一次或两次，每次逗留不超过7天，目前可以自行入关，和G签一样。
   三个月一次有效 在香港或澳门逗留不超过7天 20元/每签     三个月两次有效 在香港或澳门逗留不超过7天 40元/每签   一年一次有效 在香港或澳门逗留不超过7天 20元/每签   一年两次有效 在香港或澳门逗留不超过7天 40元/每签    2 探亲T：</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://forrestsu.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://forrestsu.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>